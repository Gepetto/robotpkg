Fix build on x86_64: std::min() does not like mixed types.
XXX idx{1,2} should probably be of the right type instead.

--- include/sot/core/rotation-simple.hh~	2011-11-01 15:16:33.464338939 +0100
+++ include/sot/core/rotation-simple.hh	2011-11-01 15:24:43.088613924 +0100
@@ -523,7 +523,8 @@
   }
   void multiplyLeftMatrixTemplate( bub::triangular_matrix<double,bub::upper> & M ) const
   {
-    const unsigned int n = std::min( std::min(idx1,idx2),M.size1());
+    const unsigned int n = std::min( std::min(idx1,idx2),
+                                     static_cast<unsigned int>(M.size1()));
     for( unsigned int row=0;row<n;++row )
       {
         double & R1 =  M(row,idx1);  double & R2 =  M(row,idx2);
@@ -534,7 +535,8 @@
   template< typename bubTemplateMatrix > // M <- M.U
   void multiplyLeftMatrixTemplate( bub::triangular_adaptor<bubTemplateMatrix,bub::upper> & M ) const
   {
-    const unsigned int n = std::min( std::min(idx1,idx2)+1,M.size1());
+    const unsigned int n = std::min( std::min(idx1,idx2)+1,
+                                     static_cast<unsigned int>(M.size1()));
     for( unsigned int row=0;row<n;++row )
       {
         double & R1 =  M(row,idx1);  double & R2 =  M(row,idx2);
@@ -557,7 +559,8 @@
   }
   void multiplyRightMatrixTemplate( bub::triangular_matrix<double,bub::upper> & M ) const
   {
-    const unsigned int m = std::min( std::min(idx1,idx2),M.size2());
+    const unsigned int m = std::min( std::min(idx1,idx2),
+                                     static_cast<unsigned int>(M.size2()));
     for( unsigned int col=0;col<m;++col )
       {
         double & R1 =  M(idx1,col);  double & R2 =  M(idx2,col);
@@ -568,7 +571,8 @@
   template< typename bubTemplateMatrix >  // M <- M.U'
   void multiplyRightMatrixTemplate( bub::triangular_adaptor<bubTemplateMatrix,bub::upper> & M ) const
   {
-    const unsigned int m = std::min( std::min(idx1,idx2)+1,M.size2());
+    const unsigned int m = std::min( std::min(idx1,idx2)+1,
+                                     static_cast<unsigned int>(M.size2()));
     for( unsigned int col=0;col<m;++col )
       {
         double & R1 =  M(idx1,col);  double & R2 =  M(idx2,col);
@@ -591,7 +595,8 @@
   }
   void multiplyLeftTransposeMatrixTemplate( bub::triangular_matrix<double,bub::upper> & M ) const
   {
-    const unsigned int n = std::min( std::min(idx1,idx2),M.size1());
+    const unsigned int n = std::min( std::min(idx1,idx2),
+                                     static_cast<unsigned int>(M.size1()));
     for( unsigned int row=0;row<n;++row )
       {
         double & R1 =  M(row,idx1);  double & R2 =  M(row,idx2);
@@ -602,7 +607,8 @@
   template< typename bubTemplateMatrix > // M <- M.U
   void multiplyLeftTransposeMatrixTemplate( bub::triangular_adaptor<bubTemplateMatrix,bub::upper> & M ) const
   {
-    const unsigned int n = std::min( std::min(idx1,idx2)+1,M.size1());
+    const unsigned int n = std::min( std::min(idx1,idx2)+1,
+                                     static_cast<unsigned int>(M.size1()));
     for( unsigned int row=0;row<n;++row )
       {
         double & R1 =  M(row,idx1);  double & R2 =  M(row,idx2);
