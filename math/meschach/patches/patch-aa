--- configure.in.orig	2010-12-16 15:53:33.038666882 +0100
+++ configure.in	2010-12-16 15:54:04.525664858 +0100
@@ -1,15 +1,11 @@
 dnl Meschach autoconf script
 dnl Copyright (C) Brook Milligan and David Stewart, 1993, 2002
-dnl $Id: configure.in,v 1.3 1994/03/08 05:41:32 des Exp $
+dnl $Id: configure.in 2010/12/16 15:54:04 mallet $
 dnl
 dnl I want to use this to see if the compiler can be made ANSI C compatible
 dnl AC_PROG_CC_STDC
 dnl Brook Milligan's prototype check
 dnl Check if $(CC) supports prototypes
-define(LOCAL_HAVE_PROTOTYPES,
-[AC_TRY_COMPILE([function prototypes], ,
-[extern int test (int i, double x);],
-AC_DEFINE(HAVE_PROTOTYPES))])dnl
 dnl
 dnl Brook Milligan's compiler check
 dnl Check for the sun ansi c compiler, acc
@@ -27,7 +23,7 @@
 dnl Start of configure.in proper
 dnl ----------------------------------------------------------------------
 AC_INIT(err.c)
-AC_CONFIG_HEADER(machine.h)
+AC_CONFIG_HEADER(acmachine.h)
 PROGS=""
 AC_SUBST(PROGS)dnl
 LOCAL_PROG_ACC
@@ -41,60 +37,59 @@
 dnl
 dnl Brook Milligan's prototype check
 dnl Check if $(CC) supports prototypes in function declarations and structures
-define(LOCAL_HAVE_PROTOTYPES,
-[AC_TRY_COMPILE([function prototypes], ,
+AC_DEFUN([LOCAL_HAVE_PROTOTYPES],
+[AC_TRY_COMPILE([],
 [extern int test (int i, double x);],
-AC_DEFINE(HAVE_PROTOTYPES))
-AC_TRY_COMPILE([function prototypes in structures], ,
+AC_DEFINE(HAVE_PROTOTYPES,[],[HAVE_PROTOTYPES]))
+AC_TRY_COMPILE([],
 [struct s1 {int (*f) (int a);};
 struct s2 {int (*f) (double a);};],
-AC_DEFINE(HAVE_PROTOTYPES_IN_STRUCT))])dnl
+AC_DEFINE(HAVE_PROTOTYPES_IN_STRUCT,[],[HAVE_PROTOTYPES_IN_STRUCT]))])dnl
 dnl
 AC_PROG_RANLIB
 AC_HAVE_HEADERS(memory.h)
 AC_STDC_HEADERS
-AC_HEADER_CHECK(complex.h, AC_DEFINE(HAVE_COMPLEX_H),)
-AC_HEADER_CHECK(malloc.h, AC_DEFINE(HAVE_MALLOC_H),)
-AC_HEADER_CHECK(varargs.h, AC_DEFINE(VARARGS),)
-AC_DEFINE(NOT_SEGMENTED)
+AC_HEADER_CHECK(complex.h, AC_DEFINE(HAVE_COMPLEX_H,[],[HAVE_COMPLEX_H]),)
+AC_HEADER_CHECK(malloc.h, AC_DEFINE(HAVE_MALLOC_H,[],[HAVE_MALLOC_H]),)
+AC_HEADER_CHECK(varargs.h, AC_DEFINE(VARARGS,[],[VARARGS]),)
+AC_DEFINE(NOT_SEGMENTED,[],[NOT_SEGMENTED])
 AC_SIZE_T
 AC_CONST
 AC_WORDS_BIGENDIAN
-AC_ARG_WITH(complex, AC_DEFINE(COMPLEX))
-AC_ARG_WITH(sparse, AC_DEFINE(SPARSE))
-AC_ARG_WITH(all, AC_DEFINE(COMPLEX))
-AC_ARG_WITH(all, AC_DEFINE(SPARSE))
-AC_ARG_WITH(unroll, AC_DEFINE(VUNROLL))
-AC_ARG_WITH(munroll, AC_DEFINE(MUNROLL))
-AC_ARG_WITH(segmem, AC_DEFINE(SEGMENTED))
-AC_ARG_WITH(float, AC_DEFINE(REAL_FLT))
-AC_ARG_WITH(double, AC_DEFINE(REAL_DBL))
+AC_ARG_WITH(complex, [], AC_DEFINE(COMPLEX,[1],[COMPLEX]))
+AC_ARG_WITH(sparse, [], AC_DEFINE(SPARSE,[1],[SPARSE]))
+AC_ARG_WITH(all, [], AC_DEFINE(COMPLEX,[1],[COMPLEX]) AC_DEFINE(SPARSE,[1],[SPARSE]))
+AC_ARG_WITH(unroll, [], AC_DEFINE(VUNROLL,[1],[VUNROLL]))
+AC_ARG_WITH(munroll, [], AC_DEFINE(MUNROLL,[1],[MUNROLL]))
+AC_ARG_WITH(segmem, [], AC_DEFINE(SEGMENTED,[1],[SEGMENTED]))
+AC_ARG_WITH(float, [], AC_DEFINE(REAL_FLT,[1],[REAL_FLT]))
+AC_ARG_WITH(double, [], AC_DEFINE(REAL_DBL,[1],[REAL_DBL]))
 LIBS="$LIBS -lm"
-AC_TRY_COMPILE([u_int],[#include <stdio.h>
+AC_TRY_COMPILE([#include <stdio.h>
 #ifdef __STDC__
 #include <stdlib.h>
-#endif],[u_int i; i = 1;],AC_DEFINE(U_INT_DEF))
+#endif],[u_int i; i = 1;],AC_DEFINE(U_INT_DEF,[],[U_INT_DEF]))
 echo 'computing machine epsilon(s)'
 echo $CC -o macheps dmacheps.c
 $CC -o macheps dmacheps.c
-AC_DEFINE_UNQUOTED(D_MACHEPS,`macheps`)
+AC_DEFINE_UNQUOTED(D_MACHEPS,`macheps`,[D_MACHEPS])
 echo $CC -o macheps fmacheps.c
 $CC -o macheps fmacheps.c
-AC_DEFINE_UNQUOTED(F_MACHEPS,`macheps`)
+AC_DEFINE_UNQUOTED(F_MACHEPS,`macheps`,[F_MACHEPS])
 echo computing M_MAX_INT
 echo $CC -o maxint maxint.c
 $CC -o maxint maxint.c
-AC_DEFINE_UNQUOTED(M_MAX_INT,`maxint`)
+AC_DEFINE_UNQUOTED(M_MAX_INT,`maxint`,[M_MAX_INT])
 echo checking char '\\0' vs. float zeros
 AC_PROGRAM_EGREP(yes,[main() {
     char	*cp = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
     double	*dp;
     dp = (double *)cp;
     if ( *dp == 0.0 ) printf("yes\n");  }
-],AC_DEFINE(CHAR0ISDBL0))
+],AC_DEFINE(CHAR0ISDBL0, [], [CHAR0ISDBL0]))
 AC_HAVE_FUNCS(bcopy bzero)
 LOCAL_HAVE_PROTOTYPES
-AC_CONFIG_FILES([makefile make.mex])
+AC_CONFIG_FILES([makefile])
 AC_OUTPUT
 echo "Extensions to basic version: use configure --with-opt1 --with-opt2"
 echo "  Option:"
