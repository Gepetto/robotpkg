curl -sSL https://github.com/jrl-umi3218/jrl-cmakemodules/pull/430.patch | sed -r 's/([-+]{3} )[ab]\//\1cmake\//' > patch-aa
From 43806fd9c1b85480e6fcbd3968a36c3c23345d12 Mon Sep 17 00:00:00 2001
From: Guilhem Saurel <guilhem.saurel@laas.fr>
Date: Mon, 10 Aug 2020 15:48:22 +0200
Subject: [PATCH] Boost: don't export python, fix #422, fix #423

---
 boost.cmake | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/boost.cmake b/boost.cmake
index b2cf262..3a57ac1 100644
--- cmake/boost.cmake
+++ cmake/boost.cmake
@@ -1,4 +1,4 @@
-# Copyright (C) 2008-2019 LAAS-CNRS, JRL AIST-CNRS, INRIA
+# Copyright (C) 2008-2020 LAAS-CNRS, JRL AIST-CNRS, INRIA
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -54,7 +54,8 @@ ENDFUNCTION(SEARCH_FOR_BOOST_COMPONENT boost_python_name found)
 #  A special treatment must be done for the boost-python component. 
 #  For boost >= 1.67.0, FindPython macro should be called first in order
 #  to automatically detect the right boost-python component version according
-#  to the Python version (2.7 or 3.x).
+#  to the Python version (2.7 or 3.x). Also, this component won't be exported
+#  as a dependency
 #
 
 IF(CMAKE_VERSION VERSION_LESS "3.12")
@@ -117,25 +118,29 @@ MACRO(SEARCH_FOR_BOOST)
       FOREACH(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
         SEARCH_FOR_BOOST_COMPONENT(${BOOST_PYTHON_COMPONENT} BOOST_PYTHON_FOUND)
         IF(BOOST_PYTHON_FOUND)
-          LIST(APPEND BOOST_COMPONENTS_ ${BOOST_PYTHON_COMPONENT})
+          SET(BOOST_COMPONENT_PYTHON "${BOOST_PYTHON_COMPONENT}")
           BREAK()
         ENDIF(BOOST_PYTHON_FOUND)
       ENDFOREACH(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
 
       # If boost-python has not been found, then force warning from FIND_PACKAGE directly
       IF(NOT BOOST_PYTHON_FOUND)
-        LIST(APPEND BOOST_COMPONENTS_ "python")
+        SET(BOOST_COMPONENT_PYTHON "python")
       ENDIF(NOT BOOST_PYTHON_FOUND)
       
+    FIND_PACKAGE(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENT_PYTHON} REQUIRED)
+    ADD_PROJECT_DEPENDENCY(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENTS_} REQUIRED)
+    LIST(APPEND BOOST_COMPONENTS_ ${BOOST_COMPONENT_PYTHON})
     ENDIF(BOOST_PYTHON_WITH_PYTHON_VERSION_NAMING)
 
     SET(BOOST_COMPONENTS ${BOOST_COMPONENTS_})
+  ELSE(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
+    ADD_PROJECT_DEPENDENCY(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
   ENDIF(${PYTHON_IN_BOOST_COMPONENTS} GREATER -1)
 
   # Make Boost component exportable
   LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
   LIST(INSERT _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY 0 "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON)")
-  ADD_PROJECT_DEPENDENCY(Boost ${BOOST_REQUIRED} COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
 
   IF(NOT Boost_FOUND)
     MESSAGE(
