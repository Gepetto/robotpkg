--- CMakeLists.txt	2022-07-27 20:06:51.417121004 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/CMakeLists.txt	2022-07-27 20:06:41.541031208 +0200
@@ -34,7 +34,6 @@
 PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})
 
 INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/boost.cmake)
-INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/python.cmake)
 INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/ide.cmake)
 INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/apple.cmake)
 IF(APPLE) # Use the handmade approach
@@ -76,7 +75,10 @@
 OPTION(BUILD_WITH_CASADI_SUPPORT "Build the library with the support of CASADI" OFF)
 OPTION(BUILD_WITH_CODEGEN_SUPPORT "Build the library with the support of code generation (via CppADCodeGen)" OFF)
 OPTION(BUILD_WITH_OPENMP_SUPPORT "Build the library with the OpenMP support" OFF)
-cmake_dependent_option(LINK_PYTHON_INTERFACE_TO_OPENMP "Link OpenMP to the Python interface" ON BUILD_WITH_OPENMP_SUPPORT OFF)
+cmake_dependent_option(LINK_PYTHON_INTERFACE_TO_OPENMP "Link OpenMP to the Python interface" ON
+  "BUILD_PYTHON_INTERFACE;BUILD_WITH_OPENMP_SUPPORT" OFF)
+cmake_dependent_option(BUILD_WITH_LIBPYTHON "Link to libpython to embed an interpreter for the python_parser feature" ON
+  "BUILD_PYTHON_INTERFACE" OFF)
 
 OPTION(INITIALIZE_WITH_NAN "Initialize Eigen entries with NaN" OFF)
 
@@ -112,8 +114,8 @@
 SET(CFLAGS_DEPENDENCIES)
 
 IF(BUILD_WITH_URDF_SUPPORT)
-  ADD_PROJECT_DEPENDENCY(urdfdom_headers)
-  ADD_PROJECT_DEPENDENCY(urdfdom PKG_CONFIG_REQUIRES "urdfdom >= 0.2.0")
+  ADD_PROJECT_DEPENDENCY(urdfdom_headers REQUIRED)
+  ADD_PROJECT_DEPENDENCY(urdfdom REQUIRED PKG_CONFIG_REQUIRES "urdfdom >= 0.2.0")
   SET(urdfdom_VERSION ${urdfdom_headers_VERSION})
   ADD_DEFINITIONS(-DPINOCCHIO_WITH_URDFDOM)
   LIST(APPEND CFLAGS_DEPENDENCIES "-DPINOCCHIO_WITH_URDFDOM")
@@ -150,10 +152,15 @@
 
 IF(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "The Python bindings of Pinocchio will be compiled along the main library. If you want to disable this feature, please set the option BUILD_PYTHON_INTERFACE to OFF.")
-  FINDPYTHON(REQUIRED)
-  SEARCH_FOR_BOOST_PYTHON(REQUIRED)
-  ADD_PROJECT_DEPENDENCY(eigenpy 2.6.2 REQUIRED)
   
+  set(PYTHON_COMPONENTS Interpreter Development.Module NumPy)
+  IF(BUILD_WITH_LIBPYTHON)
+    set(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
+  ENDIF()
+
+  ADD_PROJECT_DEPENDENCY(eigenpy 2.7.10 REQUIRED)
+
+  IF(BUILD_WITH_LIBPYTHON)
   # Check wether this a PyPy Python
   EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import platform; print(platform.python_implementation())"
     OUTPUT_VARIABLE _python_implementation_value
@@ -162,9 +169,9 @@
   
   MESSAGE(STATUS "Python compiler: ${_python_implementation_value}")
   IF(_python_implementation_value MATCHES "PyPy")
-    SET(BUILD_PYTHON_INTERFACE_WITH_PYPY TRUE)
+      MESSAGE(FATAL_ERROR "PyPy detected, therefore libpython is not available. Please set BUILD_WITH_LIBPYTHON to OFF.")
+    ENDIF()
   ENDIF()
-  
 ELSE(BUILD_PYTHON_INTERFACE)
   MESSAGE(STATUS "Pinocchio won't be compiled with its Python bindings. If you want to enable this feature, please set the option BUILD_PYTHON_INTERFACE to ON.")
 ENDIF(BUILD_PYTHON_INTERFACE)
@@ -196,9 +203,6 @@
 ADD_DEFINITIONS(-DBOOST_MPL_LIMIT_LIST_SIZE=30)
 ADD_DEFINITIONS(-DBOOST_MPL_LIMIT_VECTOR_SIZE=30)
 
-# Path to boost headers
-INCLUDE_DIRECTORIES(SYSTEM ${Boost_INCLUDE_DIRS})
-
 # ----------------------------------------------------
 # --- INCLUDE ----------------------------------------
 # ----------------------------------------------------
--- src/CMakeLists.txt	2022-04-20 11:23:16.966226600 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/src/CMakeLists.txt	2022-07-27 19:17:58.459186610 +0200
@@ -18,9 +18,29 @@
 
 # Create target libpinocchio.so
 ADD_LIBRARY(${PROJECT_NAME} SHARED ${HEADERS} ${${PROJECT_NAME}_SOURCES})
-SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)
+SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
+  LINKER_LANGUAGE CXX
+  INSTALL_RPATH "\$ORIGIN")
 TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC ${CURRENT_COMPILE_DEFINITIONS})
 
+# Create header-only target
+ADD_LIBRARY(${PROJECT_NAME}_headers INTERFACE)
+
+# Exclude parts from hppfcl which is not header only
+IF(BUILD_WITH_HPP_FCL_SUPPORT)
+  LIST(REMOVE_ITEM CURRENT_COMPILE_DEFINITIONS PINOCCHIO_WITH_HPP_FCL)
+ENDIF(BUILD_WITH_HPP_FCL_SUPPORT)
+
+TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME}_headers INTERFACE ${CURRENT_COMPILE_DEFINITIONS})
+MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
+  TARGETS Eigen3::Eigen
+  INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
+MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME}_headers SCOPE INTERFACE
+  TARGETS Boost::filesystem Boost::system Boost::serialization
+  LIBRARIES ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
+  INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
+TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME}_headers INTERFACE $<INSTALL_INTERFACE:include>)
+
 IF(MSVC)
   TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC "/bigobj")
 ENDIF()
@@ -33,8 +53,13 @@
   TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE -DNOMINMAX)
 ENDIF(WIN32)
 
-TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} SYSTEM PUBLIC ${EIGEN3_INCLUDE_DIR})
-TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_SERIALIZATION_LIBRARY})
+MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME} SCOPE PUBLIC
+  TARGETS Eigen3::Eigen
+  INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
+MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME} SCOPE PUBLIC
+  TARGETS Boost::filesystem Boost::system Boost::serialization
+  LIBRARIES ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
+  INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
 TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC $<INSTALL_INTERFACE:include>)
 
 # Special care of urdfdom version
@@ -53,8 +78,10 @@
     TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE -DPINOCCHIO_URDFDOM_USE_STD_SHARED_PTR)
   ENDIF(${urdfdom_VERSION} VERSION_GREATER "0.4.2")
 
-  TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${urdfdom_LIBRARIES})
-  TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} SYSTEM PUBLIC ${urdfdom_INCLUDE_DIRS})
+  MODERNIZE_TARGET_LINK_LIBRARIES(${PROJECT_NAME} SCOPE PUBLIC
+    TARGETS urdfdom::urdf_parser
+    LIBRARIES ${urdfdom_LIBRARIES}
+    INCLUDE_DIRS ${urdfdom_INCLUDE_DIRS})
 ENDIF(urdfdom_FOUND)
 
 IF(hpp-fcl_FOUND)
@@ -72,3 +99,10 @@
   ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
   RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})
 
+INSTALL(TARGETS ${PROJECT_NAME}_headers
+  EXPORT ${TARGETS_EXPORT_NAME}
+  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_FULL_BINDIR})
--- benchmark/CMakeLists.txt	2022-04-20 11:23:27.144686000 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/benchmark/CMakeLists.txt	2022-07-27 19:17:58.455186575 +0200
@@ -73,7 +73,9 @@
 # timings-eigen
 # 
 ADD_BENCH(timings-eigen)
-TARGET_INCLUDE_DIRECTORIES(timings-eigen PUBLIC ${EIGEN3_INCLUDE_DIR})
+MODERNIZE_TARGET_LINK_LIBRARIES(timings-eigen SCOPE PUBLIC
+  TARGETS Eigen3::Eigen
+  INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
 
 # timings-geometry
 # 
--- bindings/python/CMakeLists.txt	2022-07-27 20:06:51.413120968 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/bindings/python/CMakeLists.txt	2022-07-27 20:05:19.768287332 +0200
@@ -143,19 +143,18 @@
      )
 
 # Parser for Python model
-IF(BUILD_PYTHON_INTERFACE_WITH_PYPY)
+IF(BUILD_WITH_LIBPYTHON)
+  SET(${PROJECT_NAME}_PARSER_PYTHON_HEADERS
+    parsers/python.hpp
+    )
+ELSE(BUILD_WITH_LIBPYTHON)
   LIST(REMOVE_ITEM ${PROJECT_NAME}_PYTHON_HEADERS
     parsers/python.hpp
     )
-
   LIST(REMOVE_ITEM ${PROJECT_NAME}_PYTHON_SOURCES
     parsers/python/model.cpp
     )
-ELSE(BUILD_PYTHON_INTERFACE_WITH_PYPY)
-  SET(${PROJECT_NAME}_PARSER_PYTHON_HEADERS
-    parsers/python.hpp
-    )
-ENDIF(BUILD_PYTHON_INTERFACE_WITH_PYPY)
+ENDIF(BUILD_WITH_LIBPYTHON)
 
 # Python exposition of FCL
 IF(NOT BUILD_WITH_HPP_FCL_PYTHON_BINDINGS)
@@ -205,9 +204,9 @@
 MAKE_DIRECTORY("${${PROJECT_NAME}_BINARY_DIR}/include/pinocchio/bindings/python/utils")
 
 # Headers of the Python parser
-IF(NOT BUILD_PYTHON_INTERFACE_WITH_PYPY)
+IF(BUILD_WITH_LIBPYTHON)
   MAKE_DIRECTORY("${${PROJECT_NAME}_BINARY_DIR}/include/pinocchio/parsers/python")
-ENDIF(NOT BUILD_PYTHON_INTERFACE_WITH_PYPY)
+ENDIF(BUILD_WITH_LIBPYTHON)
 
 # --- COMPILE WRAPPER
 MAKE_DIRECTORY("${${PROJECT_NAME}_BINARY_DIR}/bindings/python/${PROJECT_NAME}")
@@ -215,7 +214,6 @@
 SET(${PYWRAP}_HEADERS ${${PROJECT_NAME}_PYTHON_HEADERS})
 
 IF(BUILD_PYTHON_INTERFACE)
-  INCLUDE_DIRECTORIES(SYSTEM ${PYTHON_INCLUDE_DIRS})
   ADD_CUSTOM_TARGET(python)
   SET_TARGET_PROPERTIES(python PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD True)
 
--- unittest/CMakeLists.txt	2022-07-27 20:06:51.413120968 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/unittest/CMakeLists.txt	2022-07-27 20:05:31.892397665 +0200
@@ -34,8 +34,12 @@
     ADD_TEST_CFLAGS(${NAME} "-DNOMINMAX -D_USE_MATH_DEFINES")
   ENDIF(WIN32)
 
+  IF(NOT unit_test_HEADER_ONLY)
     TARGET_LINK_LIBRARIES(${TEST_NAME} PUBLIC ${PROJECT_NAME}::${PROJECT_NAME})
-  TARGET_LINK_LIBRARIES(${TEST_NAME} PRIVATE ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+  ENDIF(NOT unit_test_HEADER_ONLY)
+  MODERNIZE_TARGET_LINK_LIBRARIES(${TEST_NAME} SCOPE PRIVATE
+    TARGETS Boost::unit_test_framework
+    LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
 ENDMACRO(ADD_PINOCCHIO_UNIT_TEST)
 
 MACRO(ADD_OPTIONAL_COMPILE_DEPENDENCY PKG_CONFIG_STRING)
@@ -93,7 +97,7 @@
   ENDIF(hpp-fcl_FOUND)
 ENDIF(urdfdom_FOUND)
 
-IF(BUILD_PYTHON_INTERFACE AND NOT BUILD_PYTHON_INTERFACE_WITH_PYPY)
+IF(BUILD_WITH_LIBPYTHON)
   ADD_PINOCCHIO_UNIT_TEST(python_parser PACKAGES eigenpy)
   TARGET_INCLUDE_DIRECTORIES(test-cpp-python_parser SYSTEM PUBLIC ${PYTHON_INCLUDE_DIRS})
 
@@ -115,7 +119,7 @@
   ENDIF(APPLE)
   SET_PROPERTY(TEST test-cpp-python_parser PROPERTY ENVIRONMENT ${ENV_VARIABLES})
   ADD_SUBDIRECTORY(python)
-ENDIF(BUILD_PYTHON_INTERFACE AND NOT BUILD_PYTHON_INTERFACE_WITH_PYPY)
+ENDIF(BUILD_WITH_LIBPYTHON)
 
 # Test over the joints
 ADD_PINOCCHIO_UNIT_TEST(all-joints)
@@ -233,4 +237,3 @@
   ADD_CASADI_UNIT_TEST(casadi-algo)
   ADD_CASADI_UNIT_TEST(casadi-algo-derivatives)
 ENDIF(BUILD_WITH_CASADI_SUPPORT)
-
--- utils/CMakeLists.txt	2022-04-20 11:23:27.297970300 +0200
+++ /home/gsaurel/local/stack-of-tasks/pinocchio/utils/CMakeLists.txt	2022-07-27 19:17:58.459186610 +0200
@@ -14,11 +14,6 @@
   ENDIF(BUILD_UTILS)
 
   TARGET_LINK_LIBRARIES(${NAME} PUBLIC ${PROJECT_NAME})
-  IF(BUILD_PYTHON_INTERFACE)
-    TARGET_INCLUDE_DIRECTORIES(${NAME} SYSTEM PUBLIC ${PYTHON_INCLUDE_DIRS}) 
-    TARGET_LINK_BOOST_PYTHON(${NAME} PUBLIC)
-    TARGET_LINK_LIBRARIES(${NAME} PUBLIC ${PYTHON_LIBRARIES})
-  ENDIF(BUILD_PYTHON_INTERFACE)
 
   ADD_DEPENDENCIES(utils ${NAME})
 
