Use const ref, fix build with gcc-8
See https://github.com/stack-of-tasks/pinocchio/issues/511


--- src/algorithm/center-of-mass.hxx
+++ src/algorithm/center-of-mass.hxx
@@ -150,7 +150,7 @@
   {
     typedef boost::fusion::vector<const se3::Model &,
                                   se3::Data &,
-                                  const bool
+                                  const bool &
                                   > ArgsType;
   
     JOINT_VISITOR_INIT(JacobianCenterOfMassBackwardStep);


--- src/multibody/joint/joint-basic-visitors.hxx
+++ src/multibody/joint/joint-basic-visitors.hxx
@@ -105,7 +105,7 @@
   struct JointCalcAbaVisitor : public fusion::JointVisitor<JointCalcAbaVisitor>
   {
     typedef boost::fusion::vector< Inertia::Matrix6 &,
-                                    const bool > ArgsType;
+                                    const bool & > ArgsType;
 
     JOINT_VISITOR_INIT(JointCalcAbaVisitor);
 
--- src/algorithm/joint-configuration.hxx~	2018-06-01 18:16:43.000000000 +0200
+++ src/algorithm/joint-configuration.hxx	2018-09-19 17:18:11.248335768 +0200
@@ -149,7 +149,7 @@
   {
     typedef boost::fusion::vector<const Eigen::VectorXd &,
                                   const Eigen::VectorXd &,
-                                  const double,
+                                  const double &,
                                   Eigen::VectorXd &
                                   > ArgsType;
 
@@ -260,7 +260,7 @@
   template<typename LieGroup_t>
   struct SquaredDistanceStep : public fusion::JointModelVisitor<SquaredDistanceStep<LieGroup_t> >
   {
-    typedef boost::fusion::vector<const Model::JointIndex,
+    typedef boost::fusion::vector<const Model::JointIndex &,
                                   const Eigen::VectorXd &,
                                   const Eigen::VectorXd &,
                                   Eigen::VectorXd &
