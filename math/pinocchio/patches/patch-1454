From 6463d731dfec07ede18e0f8b362478c4d25a6eb9 Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 09:23:16 +0200
Subject: [PATCH 1/7] serialization: fix cast

---
 src/serialization/vector.hpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/serialization/vector.hpp b/src/serialization/vector.hpp
index c043f8df5..146653374 100644
--- src/serialization/vector.hpp
+++ src/serialization/vector.hpp
@@ -105,7 +105,7 @@ namespace boost
             for(typename std::vector<T,Allocator>::const_iterator hint = const_value().begin();
                 hint != const_value().end(); ++hint)
             {
-              ar & boost::serialization::make_nvp("item", *hint);
+              ar & boost::serialization::make_nvp("item", const_cast<T&>(*hint));
             }
           }
         }

From 23ecf71c61b07fa1383b69f348c440e50916200b Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 10:34:56 +0200
Subject: [PATCH 3/7] serialization: fix make_nvp for when getting bool type

---
 src/serialization/vector.hpp | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/serialization/vector.hpp b/src/serialization/vector.hpp
index 146653374..cb71bf959 100644
--- src/serialization/vector.hpp
+++ src/serialization/vector.hpp
@@ -19,8 +19,16 @@ namespace boost
     
 
 #if BOOST_VERSION / 100 % 1000 == 58
+    
     namespace fixme
     {
+    
+      template<class T>
+      inline const nvp<T>
+      make_nvp(const char* n, T* v) BOOST_NOEXCEPT
+      {
+        return nvp<T>(n, *v);
+      }
       
       template<class T>
       struct nvp :
@@ -105,7 +113,7 @@ namespace boost
             for(typename std::vector<T,Allocator>::const_iterator hint = const_value().begin();
                 hint != const_value().end(); ++hint)
             {
-              ar & boost::serialization::make_nvp("item", const_cast<T&>(*hint));
+              ar & boost::serialization::fixme::make_nvp("item", hint);
             }
           }
         }
@@ -121,7 +129,7 @@ namespace boost
           for(typename std::vector<T,Allocator>::iterator hint = value().begin();
               hint != value().end(); ++hint)
           {
-            ar >> boost::serialization::make_nvp("item", *hint);
+            ar >> boost::serialization::fixme::make_nvp("item", hint);
           }
         }
         

From b494356efb2f99aa1a3102b506f77666e6cfaeb2 Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 11:23:44 +0200
Subject: [PATCH 4/7] serialization: fix pointer to pointee

---
 src/serialization/vector.hpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/serialization/vector.hpp b/src/serialization/vector.hpp
index cb71bf959..1dcfec9ba 100644
--- src/serialization/vector.hpp
+++ src/serialization/vector.hpp
@@ -113,7 +113,7 @@ namespace boost
             for(typename std::vector<T,Allocator>::const_iterator hint = const_value().begin();
                 hint != const_value().end(); ++hint)
             {
-              ar & boost::serialization::fixme::make_nvp("item", hint);
+              ar & boost::serialization::fixme::make_nvp("item", &(*hint));
             }
           }
         }
@@ -129,7 +129,7 @@ namespace boost
           for(typename std::vector<T,Allocator>::iterator hint = value().begin();
               hint != value().end(); ++hint)
           {
-            ar >> boost::serialization::fixme::make_nvp("item", hint);
+            ar >> boost::serialization::fixme::make_nvp("item", &(*hint));
           }
         }
         

From a3f686ee0f21c676b9b75fc627be3c2391ed9be3 Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 11:44:46 +0200
Subject: [PATCH 5/7] serialization: more fix

---
 src/serialization/vector.hpp | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/src/serialization/vector.hpp b/src/serialization/vector.hpp
index 1dcfec9ba..f44afedd7 100644
--- src/serialization/vector.hpp
+++ src/serialization/vector.hpp
@@ -23,11 +23,11 @@ namespace boost
     namespace fixme
     {
     
-      template<class T>
+      template<class T, class Allocator>
       inline const nvp<T>
-      make_nvp(const char* n, T* v) BOOST_NOEXCEPT
+      make_nvp(const char* n, typename std::vector<T,Allocator>::iterator & it) BOOST_NOEXCEPT
       {
-        return nvp<T>(n, *v);
+        return nvp<T>(n, *it);
       }
       
       template<class T>
@@ -83,6 +83,10 @@ namespace boost
         nvp(const nvp & rhs) :
         std::pair<const char *, std::vector<T,Allocator> *>(rhs.first, rhs.second)
         {}
+        
+        typedef typename std::vector<T,Allocator>::const_iterator const_iterator;
+        typedef typename std::vector<T,Allocator>::iterator iterator;
+        
       public:
         explicit nvp(const char * name_, std::vector<T,Allocator> & t) :
         // note: added _ to suppress useless gcc warning
@@ -110,10 +114,10 @@ namespace boost
           ar << BOOST_SERIALIZATION_NVP(count);
           if (!const_value().empty())
           {
-            for(typename std::vector<T,Allocator>::const_iterator hint = const_value().begin();
+            for(const_iterator hint = const_value().begin();
                 hint != const_value().end(); ++hint)
             {
-              ar & boost::serialization::fixme::make_nvp("item", &(*hint));
+              ar & boost::serialization::fixme::make_nvp<T,Allocator>("item", const_cast<iterator&>(hint));
             }
           }
         }
@@ -126,10 +130,10 @@ namespace boost
           std::size_t count;
           ar >> BOOST_SERIALIZATION_NVP(count);
           value().resize(count);
-          for(typename std::vector<T,Allocator>::iterator hint = value().begin();
+          for(iterator hint = value().begin();
               hint != value().end(); ++hint)
           {
-            ar >> boost::serialization::fixme::make_nvp("item", &(*hint));
+            ar >> boost::serialization::fixme::make_nvp<T,Allocator>("item", hint);
           }
         }
         

From bd092ca568e9fd8b8783a4ccab826a53c6f9a0bc Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 13:49:03 +0200
Subject: [PATCH 6/7] serialization: try simpler fix

---
 src/serialization/vector.hpp | 80 ++++++++++++++++++++++++++++++++----
 1 file changed, 71 insertions(+), 9 deletions(-)

diff --git a/src/serialization/vector.hpp b/src/serialization/vector.hpp
index f44afedd7..a451e3ece 100644
--- src/serialization/vector.hpp
+++ src/serialization/vector.hpp
@@ -22,13 +22,6 @@ namespace boost
     
     namespace fixme
     {
-    
-      template<class T, class Allocator>
-      inline const nvp<T>
-      make_nvp(const char* n, typename std::vector<T,Allocator>::iterator & it) BOOST_NOEXCEPT
-      {
-        return nvp<T>(n, *it);
-      }
       
       template<class T>
       struct nvp :
@@ -117,7 +110,74 @@ namespace boost
             for(const_iterator hint = const_value().begin();
                 hint != const_value().end(); ++hint)
             {
-              ar & boost::serialization::fixme::make_nvp<T,Allocator>("item", const_cast<iterator&>(hint));
+              ar & boost::serialization::make_nvp("item", *hint);
+            }
+          }
+        }
+        
+        template<class Archive>
+        void load(Archive & ar,
+                  const unsigned int /* file_version */
+        )
+        {
+          std::size_t count;
+          ar >> BOOST_SERIALIZATION_NVP(count);
+          value().resize(count);
+          for(iterator hint = value().begin();
+              hint != value().end(); ++hint)
+          {
+            ar >> boost::serialization::make_nvp("item", *hint);
+          }
+        }
+        
+        BOOST_SERIALIZATION_SPLIT_MEMBER()
+      };
+
+      template<typename Allocator>
+      struct nvp< std::vector<bool,Allocator> > :
+      public std::pair<const char *, std::vector<bool,Allocator> *>,
+      public wrapper_traits<const nvp< std::vector<bool,Allocator> > >
+      {
+        //private:
+        nvp(const nvp & rhs) :
+        std::pair<const char *, std::vector<bool,Allocator> *>(rhs.first, rhs.second)
+        {}
+        
+        typedef typename std::vector<bool,Allocator>::const_iterator const_iterator;
+        typedef typename std::vector<bool,Allocator>::iterator iterator;
+        
+      public:
+        explicit nvp(const char * name_, std::vector<bool,Allocator> & t) :
+        // note: added _ to suppress useless gcc warning
+        std::pair<const char *, std::vector<bool,Allocator> *>(name_, boost::addressof(t))
+        {}
+        
+        const char * name() const {
+          return this->first;
+        }
+        
+        std::vector<bool,Allocator> & value() const {
+          return *(this->second);
+        }
+        
+        const std::vector<bool,Allocator> & const_value() const {
+          return *(this->second);
+        }
+        
+        template<class Archive>
+        void save(Archive & ar,
+                  const unsigned int /* file_version */
+        ) const
+        {
+          const size_t count(const_value().size());
+          ar << BOOST_SERIALIZATION_NVP(count);
+          if (!const_value().empty())
+          {
+            for(const_iterator hint = const_value().begin();
+                hint != const_value().end(); ++hint)
+            {
+              bool v = *hint;
+              ar & boost::serialization::make_nvp("item", v);
             }
           }
         }
@@ -133,7 +193,9 @@ namespace boost
           for(iterator hint = value().begin();
               hint != value().end(); ++hint)
           {
-            ar >> boost::serialization::fixme::make_nvp<T,Allocator>("item", hint);
+            bool v;
+            ar >> boost::serialization::make_nvp("item", v);
+            *hint = v;
           }
         }
         

From 13c5fc3f79f94f961b0e36adf10a4b2da25e910d Mon Sep 17 00:00:00 2001
From: Justin Carpentier <justin.carpentier@inria.fr>
Date: Tue, 25 May 2021 15:12:57 +0200
Subject: [PATCH 7/7] algo: fix init of std::vector

---
 src/algorithm/model.hxx | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/algorithm/model.hxx b/src/algorithm/model.hxx
index af0360afd..f6954388b 100644
--- src/algorithm/model.hxx
+++ src/algorithm/model.hxx
@@ -473,7 +473,7 @@ namespace pinocchio
                     GeometryModel & reduced_geom_model)
   {
 
-    const std::vector<GeometryModel> temp_input_geoms { input_geom_model };
+    const std::vector<GeometryModel> temp_input_geoms(1,input_geom_model);
     std::vector<GeometryModel> temp_reduced_geom_models;
 
     buildReducedModel(input_model, temp_input_geoms, list_of_joints_to_lock,
