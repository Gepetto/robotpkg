From 7c7a74680fb73590af0506e77656edc56f7697e8 Mon Sep 17 00:00:00 2001
From: Florent Lamiraux <florent@laas.fr>
Date: Thu, 6 Jun 2024 06:47:40 +0000
Subject: [PATCH 1/6] Do not specify size of Identity for constant size
 matrices.

---
 include/pinocchio/multibody/joint/joint-helical.hpp  | 2 +-
 include/pinocchio/multibody/joint/joint-revolute.hpp | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/include/pinocchio/multibody/joint/joint-helical.hpp b/include/pinocchio/multibody/joint/joint-helical.hpp
index 82e62da72..842c8ecfd 100644
--- include/pinocchio/multibody/joint/joint-helical.hpp
+++ include/pinocchio/multibody/joint/joint-helical.hpp
@@ -201,7 +201,7 @@ namespace pinocchio
     }
     AngularType rotation() const
     {
-      AngularType m(AngularType::Identity(3));
+      AngularType m(AngularType::Identity());
       _setRotation(m);
       return m;
     }
diff --git a/include/pinocchio/multibody/joint/joint-revolute.hpp b/include/pinocchio/multibody/joint/joint-revolute.hpp
index ae3876032..1a77dd170 100644
--- include/pinocchio/multibody/joint/joint-revolute.hpp
+++ include/pinocchio/multibody/joint/joint-revolute.hpp
@@ -186,7 +186,7 @@ namespace pinocchio
     }
     AngularType rotation() const
     {
-      AngularType m(AngularType::Identity(3));
+      AngularType m(AngularType::Identity());
       _setRotation(m);
       return m;
     }

From 3d1b11a4bbc5e8be35601a4178482f10d91a48aa Mon Sep 17 00:00:00 2001
From: Florent Lamiraux <florent@laas.fr>
Date: Thu, 6 Jun 2024 06:49:13 +0000
Subject: [PATCH 2/6] Add a test on access to pose in joint data.

---
 unittest/all-joints.cpp | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/unittest/all-joints.cpp b/unittest/all-joints.cpp
index 44e8e802b..072188ed9 100644
--- unittest/all-joints.cpp
+++ unittest/all-joints.cpp
@@ -193,6 +193,18 @@ struct TestJointModelIsEqual : TestJointModel<TestJointModelIsEqual>
   }
 };
 
+struct TestJointModelTransform : TestJointModel<TestJointModelTransform>
+{
+  template<typename JointModel>
+  static void test(const JointModelBase<JointModel> & jmodel)
+  {
+    typedef typename JointModel::JointDataDerived JointData;
+    JointData jdata = jmodel.createData();
+    Eigen::Matrix<typename JointModel::Scalar, 3, 1> v = jdata.M_accessor().translation();
+    Eigen::Matrix<typename JointModel::Scalar, 3, 3> R = jdata.M_accessor().rotation();
+  }
+};
+
 BOOST_AUTO_TEST_CASE(isEqual)
 {
   typedef JointCollectionDefault::JointModelVariant JointModelVariant;
@@ -211,6 +223,14 @@ BOOST_AUTO_TEST_CASE(isEqual)
   BOOST_CHECK(jmodel_any != jmodelx);
 }
 
+BOOST_AUTO_TEST_CASE(transform)
+{
+  typedef JointCollectionDefault::JointModelVariant JointModelVariant;
+  boost::mpl::for_each<JointModelVariant::types>(TestJointModelTransform());
+
+  TestJointModelTransform()(JointModel());
+}
+
 struct TestJointModelCast : TestJointModel<TestJointModelCast>
 {
   template<typename JointModel>

From 52b3bf170f3f102bbe1ee80de9163a5031e71ed3 Mon Sep 17 00:00:00 2001
From: Florent Lamiraux <florent@laas.fr>
Date: Thu, 6 Jun 2024 06:49:56 +0000
Subject: [PATCH 3/6] Return Vector3 instead of Vector3::ConstandReturnType

  The compiler otherwise fails to evaluate method
  TransformHelicalTpl::translation.
---
 include/pinocchio/multibody/joint/joint-helical.hpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/pinocchio/multibody/joint/joint-helical.hpp b/include/pinocchio/multibody/joint/joint-helical.hpp
index 842c8ecfd..092357979 100644
--- include/pinocchio/multibody/joint/joint-helical.hpp
+++ include/pinocchio/multibody/joint/joint-helical.hpp
@@ -79,7 +79,7 @@ namespace pinocchio
     typedef Matrix3 AngularType;
     typedef Matrix3 AngularRef;
     typedef Matrix3 ConstAngularRef;
-    typedef typename Vector3::ConstantReturnType LinearType;
+    typedef Vector3 LinearType;
     typedef typename Vector3::ConstantReturnType LinearRef;
     typedef const typename Vector3::ConstantReturnType ConstLinearRef;
     typedef typename traits<PlainType>::ActionMatrixType ActionMatrixType;

From 1389b6a540e6e8b4cbd725e07f634ec289a90f32 Mon Sep 17 00:00:00 2001
From: Florent Lamiraux <florent@laas.fr>
Date: Tue, 11 Jun 2024 21:56:29 +0200
Subject: [PATCH 4/6] [algorithm] resolve ambiguity in JointModel type.

  When using a different JointCollection, JointModel is not of the right type
  and causes a compilation error.
---
 include/pinocchio/algorithm/model.hxx | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/include/pinocchio/algorithm/model.hxx b/include/pinocchio/algorithm/model.hxx
index 9c1ec8700..e123fcef8 100644
--- include/pinocchio/algorithm/model.hxx
+++ include/pinocchio/algorithm/model.hxx
@@ -380,8 +380,8 @@ namespace pinocchio
       for (JointIndex joint_idA = 1; joint_idA < modelA.joints.size(); ++joint_idA)
       {
         const JointIndex joint_id = model.getJointId(modelA.names[joint_idA]);
-        const JointModel & joint_model = model.joints[joint_id];
-        const JointModel & joint_modelA = modelA.joints[joint_idA];
+        const typename Model::JointModel & joint_model = model.joints[joint_id];
+        const typename Model::JointModel & joint_modelA = modelA.joints[joint_idA];
 
         joint_model.jointConfigSelector(config_vector) =
           joint_modelA.jointConfigSelector(config_vectorA);
@@ -409,8 +409,8 @@ namespace pinocchio
       for (JointIndex joint_idB = 1; joint_idB < modelB.joints.size(); ++joint_idB)
       {
         const JointIndex joint_id = model.getJointId(modelB.names[joint_idB]);
-        const JointModel & joint_model = model.joints[joint_id];
-        const JointModel & joint_modelB = modelB.joints[joint_idB];
+        const typename Model::JointModel & joint_model = model.joints[joint_id];
+        const typename Model::JointModel & joint_modelB = modelB.joints[joint_idB];
 
         joint_model.jointConfigSelector(config_vector) =
           joint_modelB.jointConfigSelector(config_vectorB);

