From 6e6043380f07a037081b7eb891a507d02331b37d Mon Sep 17 00:00:00 2001
From: Guilhem Saurel <guilhem.saurel@laas.fr>
Date: Mon, 4 May 2020 14:10:36 +0200
Subject: [PATCH] [CMake] optionalize python

This package depends on Python to install 2 files. All the other files
can be installed without Python.

And we now have other packages (eg. hpp-pinocchio) which doesn't depend
on python, but which does depend on hpp-environments. So we need a way
to provide them what they need, without adding python as a required
dependency, while it is easily avoidable.

For this, with robotpkg, it is easy to build twice the same package, one
without anything dependent on python, and another one with only the
python stuff. This also allow us to install side-by-side the non-python
files, the python files for python 2, and the python files for python 3.

This commit allow this through 2 CMake options, while keeping everything
as it was by default.
---
 CMakeLists.txt | 46 ++++++++++++++++++++++++++++------------------
 1 file changed, 28 insertions(+), 18 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f4498a5..7951c88 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -1,5 +1,5 @@
-# Copyright (c) 2016 CNRS
-# Author: Joseph Mirabel
+# Copyright (c) 2016, 2020 CNRS
+# Author: Joseph Mirabel, Guilhem Saurel
 #
 # this file is free software: you can redistribute it
 # and/or modify it under the terms of the GNU Lesser General Public
@@ -20,7 +20,12 @@ SET(PROJECT_NAME hpp-environments)
 SET(PROJECT_DESCRIPTION "Environments for the humanoid path planner platform.")
 STRING(REPLACE "-" "_" ROS_PROJECT_NAME ${PROJECT_NAME})
 
-SET(PROJECT_USE_CMAKE_EXPORT TRUE)
+OPTION(BUILD_PYTHON_INTERFACE "Build the python bindings" ON)
+OPTION(INSTALL_PYTHON_INTERFACE_ONLY "Install *ONLY* the python bindings" OFF)
+
+IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
+  SET(PROJECT_USE_CMAKE_EXPORT TRUE)
+ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
 
 INCLUDE(cmake/hpp.cmake)
 INCLUDE(cmake/python.cmake)
@@ -28,29 +33,34 @@ INCLUDE(cmake/python.cmake)
 COMPUTE_PROJECT_ARGS(PROJECT_ARGS LANGUAGES CXX)
 PROJECT(${PROJECT_NAME} ${PROJECT_ARGS})
 
-FINDPYTHON(REQUIRED)
+IF(BUILD_PYTHON_INTERFACE)
+  FINDPYTHON(REQUIRED)
+ENDIF(BUILD_PYTHON_INTERFACE)
 
 SET(TEXTURE_FILES
   texture/logo_romeo.jpg
 )
 
-INSTALL(DIRECTORY urdf
-  DESTINATION "share/${ROS_PROJECT_NAME}")
+IF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
+  INSTALL(DIRECTORY urdf
+    DESTINATION "share/${ROS_PROJECT_NAME}")
 
-INSTALL(DIRECTORY srdf
-  DESTINATION "share/${ROS_PROJECT_NAME}")
+  INSTALL(DIRECTORY srdf
+    DESTINATION "share/${ROS_PROJECT_NAME}")
 
-INSTALL(DIRECTORY meshes
-  DESTINATION "share/${ROS_PROJECT_NAME}")
+  INSTALL(DIRECTORY meshes
+    DESTINATION "share/${ROS_PROJECT_NAME}")
 
-INSTALL(FILES ${TEXTURE_FILES}
-  DESTINATION "share//${ROS_PROJECT_NAME}/texture"
-)
+  INSTALL(FILES ${TEXTURE_FILES}
+    DESTINATION "share//${ROS_PROJECT_NAME}/texture")
 
-INSTALL(FILES package.xml
-  DESTINATION "share/${ROS_PROJECT_NAME}")
+  INSTALL(FILES package.xml
+    DESTINATION "share/${ROS_PROJECT_NAME}")
 
-ADD_SUBDIRECTORY(src)
+  ADD_LIBRARY(${PROJECT_NAME} INTERFACE)
+  INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)
+ENDIF(NOT INSTALL_PYTHON_INTERFACE_ONLY)
 
-ADD_LIBRARY(${PROJECT_NAME} INTERFACE)
-INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${TARGETS_EXPORT_NAME} DESTINATION lib)
+IF(BUILD_PYTHON_INTERFACE)
+  ADD_SUBDIRECTORY(src)
+ENDIF(BUILD_PYTHON_INTERFACE)
-- 
2.26.2

