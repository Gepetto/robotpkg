Fix boost::placeholders drama

--- ./actionlib/include/actionlib/client/simple_action_client.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/client/simple_action_client.h	2021-05-28 15:27:18.803427907 +0200
@@ -330,8 +330,8 @@
   cur_simple_state_ = SimpleGoalState::PENDING;
 
   // Send the goal to the ActionServer
-  gh_ = ac_->sendGoal(goal, boost::bind(&SimpleActionClientT::handleTransition, this, _1),
-      boost::bind(&SimpleActionClientT::handleFeedback, this, _1, _2));
+  gh_ = ac_->sendGoal(goal, boost::bind(&SimpleActionClientT::handleTransition, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionClientT::handleFeedback, this, ::boost::placeholders::_1, ::boost::placeholders::_2));
 }
 
 template<class ActionSpec>
--- ./actionlib/include/actionlib/client/action_client.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/client/action_client.h	2021-05-28 15:33:54.170113818 +0200
@@ -236,17 +236,17 @@
 
     // Start publishers and subscribers
     goal_pub_ = queue_advertise<ActionGoal>("goal", static_cast<uint32_t>(pub_queue_size),
-        boost::bind(&ConnectionMonitor::goalConnectCallback, connection_monitor_, _1),
-        boost::bind(&ConnectionMonitor::goalDisconnectCallback, connection_monitor_, _1),
+        boost::bind(&ConnectionMonitor::goalConnectCallback, connection_monitor_, ::boost::placeholders::_1),
+        boost::bind(&ConnectionMonitor::goalDisconnectCallback, connection_monitor_, ::boost::placeholders::_1),
         queue);
     cancel_pub_ =
       queue_advertise<actionlib_msgs::GoalID>("cancel", static_cast<uint32_t>(pub_queue_size),
-        boost::bind(&ConnectionMonitor::cancelConnectCallback, connection_monitor_, _1),
-        boost::bind(&ConnectionMonitor::cancelDisconnectCallback, connection_monitor_, _1),
+        boost::bind(&ConnectionMonitor::cancelConnectCallback, connection_monitor_, ::boost::placeholders::_1),
+        boost::bind(&ConnectionMonitor::cancelDisconnectCallback, connection_monitor_, ::boost::placeholders::_1),
         queue);
 
-    manager_.registerSendGoalFunc(boost::bind(&ActionClientT::sendGoalFunc, this, _1));
-    manager_.registerCancelFunc(boost::bind(&ActionClientT::sendCancelFunc, this, _1));
+    manager_.registerSendGoalFunc(boost::bind(&ActionClientT::sendGoalFunc, this, ::boost::placeholders::_1));
+    manager_.registerCancelFunc(boost::bind(&ActionClientT::sendCancelFunc, this, ::boost::placeholders::_1));
   }
 
   template<class M>
@@ -275,7 +275,7 @@
     ops.datatype = ros::message_traits::datatype<M>();
     ops.helper = ros::SubscriptionCallbackHelperPtr(
       new ros::SubscriptionCallbackHelperT<const ros::MessageEvent<M const> &>(
-        boost::bind(fp, obj, _1)
+        boost::bind(fp, obj, ::boost::placeholders::_1)
       )
       );
     return n_.subscribe(ops);
--- ./actionlib/include/actionlib/client/goal_manager_imp.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/client/goal_manager_imp.h	2021-05-28 15:34:05.166188529 +0200
@@ -74,7 +74,7 @@
 
   boost::recursive_mutex::scoped_lock lock(list_mutex_);
   typename ManagedListT::Handle list_handle =
-    list_.add(comm_state_machine, boost::bind(&GoalManagerT::listElemDeleter, this, _1), guard_);
+    list_.add(comm_state_machine, boost::bind(&GoalManagerT::listElemDeleter, this, ::boost::placeholders::_1), guard_);
 
   if (send_goal_func_) {
     send_goal_func_(action_goal);
--- ./actionlib/include/actionlib/managed_list.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/managed_list.h	2021-05-28 15:34:18.882281707 +0200
@@ -213,7 +213,7 @@
    */
   Handle add(const T & elem)
   {
-    return add(elem, boost::bind(&ManagedList<T>::defaultDeleter, this, _1) );
+    return add(elem, boost::bind(&ManagedList<T>::defaultDeleter, this, ::boost::placeholders::_1) );
   }
 
   /**
--- ./actionlib/include/actionlib/server/action_server_imp.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/server/action_server_imp.h	2021-05-28 15:34:57.746545746 +0200
@@ -172,15 +172,15 @@
 
   if (status_frequency > 0) {
     status_timer_ = node_.createTimer(ros::Duration(1.0 / status_frequency),
-        boost::bind(&ActionServer::publishStatus, this, _1));
+        boost::bind(&ActionServer::publishStatus, this, ::boost::placeholders::_1));
   }
 
   goal_sub_ = node_.subscribe<ActionGoal>("goal", static_cast<uint32_t>(sub_queue_size),
-      boost::bind(&ActionServerBase<ActionSpec>::goalCallback, this, _1));
+      boost::bind(&ActionServerBase<ActionSpec>::goalCallback, this, ::boost::placeholders::_1));
 
   cancel_sub_ =
     node_.subscribe<actionlib_msgs::GoalID>("cancel", static_cast<uint32_t>(sub_queue_size),
-      boost::bind(&ActionServerBase<ActionSpec>::cancelCallback, this, _1));
+      boost::bind(&ActionServerBase<ActionSpec>::cancelCallback, this, ::boost::placeholders::_1));
 }
 
 template<class ActionSpec>
--- ./actionlib/include/actionlib/server/service_server_imp.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/server/service_server_imp.h	2021-05-28 15:35:10.110629744 +0200
@@ -58,7 +58,7 @@
 : service_cb_(service_cb)
 {
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
-      boost::bind(&ServiceServerImpT::goalCB, this, _1), false));
+      boost::bind(&ServiceServerImpT::goalCB, this, ::boost::placeholders::_1), false));
   as_->start();
 }
 
--- ./actionlib/include/actionlib/server/simple_action_server_imp.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/server/simple_action_server_imp.h	2021-05-28 15:34:48.058479929 +0200
@@ -56,8 +56,8 @@
 
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       auto_start));
 }
 
@@ -68,8 +68,8 @@
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       auto_start));
 
   if (execute_callback_) {
@@ -85,8 +85,8 @@
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n_, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       true));
 
   if (execute_callback_) {
@@ -104,8 +104,8 @@
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       auto_start));
 
   if (execute_callback_) {
@@ -121,8 +121,8 @@
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       auto_start));
 
   if (execute_callback_) {
@@ -138,8 +138,8 @@
 {
   // create the action server
   as_ = boost::shared_ptr<ActionServer<ActionSpec> >(new ActionServer<ActionSpec>(n, name,
-      boost::bind(&SimpleActionServer::goalCallback, this, _1),
-      boost::bind(&SimpleActionServer::preemptCallback, this, _1),
+      boost::bind(&SimpleActionServer::goalCallback, this, ::boost::placeholders::_1),
+      boost::bind(&SimpleActionServer::preemptCallback, this, ::boost::placeholders::_1),
       true));
 
   if (execute_callback_) {
--- ./actionlib/include/actionlib/one_shot_timer.h~	2019-08-07 23:46:10.000000000 +0200
+++ ./actionlib/include/actionlib/one_shot_timer.h	2021-05-28 15:26:38.027150921 +0200
@@ -60,7 +60,7 @@
 
   boost::function<void(const ros::TimerEvent & e)> getCb()
   {
-    return boost::bind(&OneShotTimer::cb, this, _1);
+    return boost::bind(&OneShotTimer::cb, this, ::boost::placeholders::_1);
   }
 
   void registerOneShotCb(boost::function<void(const ros::TimerEvent & e)> callback)
