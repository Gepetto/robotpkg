Make sure to encode strings with the default encoding (UTF8 for python3)

--- core/roslib/src/roslib/genpy.py.orig	2012-02-14 14:34:46.115505708 +0100
+++ core/roslib/src/roslib/genpy.py	2012-02-14 14:38:14.447505140 +0100
@@ -639,9 +639,13 @@
                 yield "else:"
                 yield INDENT+pack('%ss'%array_len, var)
         else:
-            # py3k: struct.pack() now only allows bytes for the s string pack code.
-            # FIXME: for py3k, this needs to be w/ encode, but this interferes with actual byte data
-            #yield pack2("'<I%ss'%length", "length, %s.encode()"%var) #Py3k bugfix (see http://docs.python.org/dev/whatsnew/3.2.html#porting-to-python-3-2)            
+            # FIXME: for py3k, this needs to be w/ encode, but this interferes
+            # with actual byte data.
+            yield("if python3 or type(%s) == unicode:"%var)
+            # For unicode-strings in Python2, encode using utf-8
+            yield("\t%s = %s.encode('utf-8')"%(var,var))
+            # Update the length after utf-8 conversion
+            yield("\tlength = len(%s)"%var)
             yield pack2("'<I%ss'%length", "length, %s"%var)
     else:
         yield "start = end"
@@ -649,7 +653,11 @@
             yield "end += %s" % array_len
         else:
             yield "end += length"
-        yield "%s = str[start:end]" % var
+        yield("if python3:")
+        # If messages are python3-decode back to unicode
+        yield("\t%s = str[start:end].decode('utf-8')" % var)
+        yield("else:")
+        yield("\t%s = str[start:end]" % var)
         
 def array_serializer_generator(package, type_, name, serialize, is_numpy):
     """
@@ -958,6 +966,8 @@
     clear_patterns()
 
     yield '"""autogenerated by genmsg_py from %s.msg. Do not edit."""'%name
+    yield 'import sys'
+    yield 'python3 = True if sys.hexversion > 0x03000000 else False'
     yield 'import roslib.message\nimport struct\n'
     import_strs = []
     for t in spec.types:
