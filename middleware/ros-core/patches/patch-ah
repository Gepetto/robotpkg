Quick hack for setting rpath to the installation directories.
For ELF, this is done by scanning the path to all the dependency libraries and
replacing the "WRKSRC" part by the installation prefix. An rpath for those
directories is added (except for /usr/lib*). Unfortunately other parts of this
file hardcode -rpath linker flags to the build directory, which remains after
the installation. Should not hurt too much, though.
For Darwin, the install_name strategy is used and there is nothing to do. The
patch still computes rpaths, but cmake won't use them.

Nothing is done if the env vars WRKSRC and PREFIX are not set, so that manual
installation of other ros component won't be affected (in theory :p).

--- core/rosbuild/public.cmake~	2011-01-16 19:54:57.000000000 +0100
+++ core/rosbuild/public.cmake	2011-01-16 19:55:22.000000000 +0100
@@ -502,6 +502,23 @@
 
   target_link_libraries(${exe} ${${PROJECT_NAME}_LIBRARIES})
 
+  # Add rpath to installation directories (the dirty way, as this leaves rpath
+  # to the build directories as well). This works only if ENV{WRKDIR} and
+  # ENV{PREFIX} are set (typically by robotpkg).
+  if(DEFINED ENV{WRKSRC} AND DEFINED ENV{PREFIX})
+    set(_rpaths "")
+    foreach(_linkdir ${${PROJECT_NAME}_LIBRARY_DIRS})
+      file(RELATIVE_PATH _rdir $ENV{WRKSRC} ${_linkdir})
+      get_filename_component(_rdir "$ENV{PREFIX}/$ENV{ROS_INSTALLATION_SUBDIR}/${_rdir}" ABSOLUTE)
+      list(APPEND _rpaths "${_rdir}")
+    endforeach(_linkdir)
+    list(LENGTH _rpaths _rpaths_len)
+    if (${_rpaths_len} GREATER 0)
+      set_target_properties(${exe} PROPERTIES INSTALL_RPATH "${_rpaths}"
+      				   BUILD_WITH_INSTALL_RPATH TRUE)
+    endif(${_rpaths_len} GREATER 0)
+  endif(DEFINED ENV{WRKSRC} AND DEFINED ENV{PREFIX})
+
   # Add ROS-wide compile and link flags (usually things like -Wall).  These
   # are set in rosconfig.cmake.
   rosbuild_add_compile_flags(${exe} ${ROS_COMPILE_FLAGS})
