Hardcode build directory name (the Makefile PLATFORM variable is also used to
include platform specific flags, but they only set optimization flags which
should be done at the robotpkg level anyway).

--- ThirdParty/PSCommon/BuildSystem/CommonDefs.mak~	2013-11-12 15:12:23.000000000 +0100
+++ ThirdParty/PSCommon/BuildSystem/CommonDefs.mak	2014-08-21 14:31:05.280359848 +0200
@@ -2,41 +2,8 @@
 _COMMON_DEFS_MAKE_=1
 
 # some defaults
-ifndef CFG
     CFG = Release
-endif
-
-# find out the platform on which we're running
-MACHINE = $(shell uname -m)
-ifneq (,$(findstring x86_64,$(MACHINE)))
-	HOST_PLATFORM = x64
-else ifneq (,$(findstring x86,$(MACHINE)))
-	HOST_PLATFORM = x86
-else ifneq (,$(findstring i686,$(MACHINE)))
-	HOST_PLATFORM = x86
-else ifneq (,$(findstring i386,$(MACHINE)))
-	HOST_PLATFORM = x86
-else ifneq (,$(findstring arm,$(MACHINE)))
-	HOST_PLATFORM = Arm
-else
-	DUMMY:=$(error Can't determine host platform)
-endif
-
-# now check if this is a cross-compilation or not
-ifeq "$(PLATFORM)" ""
-	PLATFORM = $(HOST_PLATFORM)
-else
-	ifneq "$(PLATFORM)" "$(HOST_PLATFORM)"
-		# cross compiling. Take CXX and STAGING_DIR from environment
-		PLATFORM_UPPER = $(shell echo $(PLATFORM) | tr 'a-z' 'A-Z')
-		DUMMY:=$(eval CXX = $($(PLATFORM_UPPER)_CXX))
-		DUMMY:=$(eval TARGET_SYS_ROOT = $($(PLATFORM_UPPER)_STAGING))
-		
-		ifeq "$(and $(CXX), $(TARGET_SYS_ROOT))" ""
-			DUMMY:=$(error Cross-Compilation error. Can't find $(PLATFORM_UPPER)_CXX and $(PLATFORM_UPPER)_STAGING)
-		endif
-	endif
-endif
+PLATFORM=x86# works for all supported archs
 
 # expand file list
 SRC_FILES_LIST = $(wildcard $(SRC_FILES))
