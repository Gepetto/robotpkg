Remove noise from the output of py-yarp

--- bindings/yarp.i.orig	2013-12-20 11:01:23.774333688 +0100
+++ bindings/yarp.i	2013-12-20 11:02:59.842336107 +0100
@@ -207,53 +207,37 @@
 #include <Python.h>
 
 void setExternal(yarp::sig::Image *img, PyObject* mem, int w, int h) {
-  fprintf(stderr,"HELLO???\n");
         Py_buffer img_buffer, img_buffer2;
         int reply;
-		fprintf(stderr, "Welcome to setExternal(yarp::sig::Image *img, PyObject* mem, int w, int h)!\nThe parameters you specified are: %ld, %ld, %d, %d\n", (long)img, (long)mem, w, h);
 		
 		reply =  PyObject_CheckBuffer(mem);
-		fprintf(stderr, "Does mem support buffer interface?: %d\n", reply);
 		
         reply = PyObject_GetBuffer(mem, &img_buffer, PyBUF_SIMPLE);
-		fprintf(stderr, "Buffer acquisition result: %d\n", reply);
-        // exit if the buffer could not be read
         if (reply != 0)
         {
             fprintf(stderr, "Could not read Python buffers: error %d\n", reply);
             return;
         }
         reply = PyBuffer_IsContiguous(&img_buffer, 'C');
-		fprintf(stderr, "Is the buffer C-contiguous?: %d\n", reply);
 		reply = PyBuffer_IsContiguous(&img_buffer, 'A');
-		fprintf(stderr, "Is the buffer contiguous at all?: %d\n", reply);
 		// we're gonna do something dirty now...
 		PyBuffer_Release(&img_buffer);
-		//memset(&img_buffer, 0, sizeof(Py_buffer));
-		fprintf(stderr, "Re-acquiring the buffer...\n");
 		reply = PyObject_GetBuffer(mem, &img_buffer2, PyBUF_SIMPLE);
-		fprintf(stderr, "Second buffer acquisition result: %d\n", reply);
 		img->setExternal((void*)img_buffer2.buf, w, h);
-		fprintf(stderr, "img->setExternal called!\n");
-        // release the Python buffers
         PyBuffer_Release(&img_buffer2);
-		fprintf(stderr, "Buffer released!\n");
 }  
 
 void setExternal2(yarp::sig::Image *img, PyObject* mem, int w, int h) {
-  fprintf(stderr,"HELLO!!! %x\n", PY_VERSION_HEX);
 #if PY_VERSION_HEX >= 0x03000000
         Py_buffer img_buffer;
         int reply;
         reply = PyObject_GetBuffer(mem, &img_buffer, PyBUF_SIMPLE);
-        // exit if the buffer could not be read
         if (reply != 0)
         {
             fprintf(stderr, "Could not read Python buffers: error %d\n", reply);
             return;
         }
         img->setExternal((void*)img_buffer.buf, w, h);
-        // release the Python buffers
         PyBuffer_Release(&img_buffer);
 #else
 	  fprintf(stderr, "Sorry, setExternal(PyObject *mem,...) requires Python3\n");
