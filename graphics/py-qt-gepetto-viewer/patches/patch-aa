Compatibility with PythonQt 3.2
ref https://github.com/Gepetto/gepetto-viewer/pull/143 & 147

--- CMakeLists.txt.orig	2020-04-29 00:44:24.000000000 +0200
+++ CMakeLists.txt	2020-06-30 14:02:34.375126772 +0200
@@ -129,18 +129,16 @@
   ${CMAKE_MODULE_PATH})
 # If GEPETTO_GUI_HAS_PYTHONQT is set to TRUE, then PythonQt is required.
 IF(DEFINED GEPETTO_GUI_HAS_PYTHONQT AND GEPETTO_GUI_HAS_PYTHONQT)
-  FIND_PACKAGE(PythonQt REQUIRED)
+  FIND_PACKAGE(PythonQt REQUIRED COMPONENTS QtAll REQUIRED)
 ELSE()
-  FIND_PACKAGE(PythonQt)
+  FIND_PACKAGE(PythonQt COMPONENTS QtAll)
 ENDIF()
 # Declare option GEPETTO_GUI_HAS_PYTHONQT
 # If GEPETTO_GUI_HAS_PYTHONQT was defined, this does not change its value.
-IF (PythonQt_FOUND)
+IF (PythonQt_FOUND AND PythonQt_QtAll_FOUND)
   SET(GEPETTO_GUI_HAS_PYTHONQT TRUE CACHE BOOL "Use PythonQt dependency")
-  SET(BOOST_COMPONENTS python)
 ELSE()
   SET(GEPETTO_GUI_HAS_PYTHONQT FALSE CACHE BOOL "Use PythonQt dependency")
-  SET(BOOST_COMPONENTS python)
 ENDIF()
 
 IF(GEPETTO_GUI_HAS_PYTHONQT)
@@ -150,7 +148,7 @@
 ENDIF(GEPETTO_GUI_HAS_PYTHONQT)
 # }}}
 
-SET(BOOST_COMPONENTS ${BOOST_COMPONENTS} unit_test_framework system)
+SET(BOOST_COMPONENTS python unit_test_framework system)
 SEARCH_FOR_BOOST()
 INCLUDE_DIRECTORIES(SYSTEM ${Boost_INCLUDE_DIRS})
 
--- cmake-module/FindPythonQt.cmake.orig	2020-04-29 00:44:24.000000000 +0200
+++ cmake-module/FindPythonQt.cmake	2020-06-30 14:10:18.675875049 +0200
@@ -4,7 +4,7 @@
 #
 
 IF(NOT EXISTS "${PYTHONQT_INSTALL_DIR}")
-  FIND_PATH(PYTHONQT_INSTALL_DIR include/PythonQt/PythonQt.h
+  FIND_PATH(PYTHONQT_INSTALL_DIR NAMES include/PythonQt/PythonQt.h include/PythonQt5/PythonQt.h
     DOC "Directory where PythonQt was installed.")
 ENDIF()
 # XXX Since PythonQt 3.0 is not yet cmakeified, depending
@@ -13,15 +13,33 @@
 #     is added as an option. See [1] for more details.
 #     [1] https://github.com/commontk/CTK/pull/538#issuecomment-86106367
 FIND_PATH(PYTHONQT_INCLUDE_DIR PythonQt.h
-  PATHS "${PYTHONQT_INSTALL_DIR}/include/PythonQt"
+  PATHS "${PYTHONQT_INSTALL_DIR}/include/PythonQt" "${PYTHONQT_INSTALL_DIR}/include/PythonQt5"
   DOC "Path to the PythonQt include directory")
+FIND_PATH(PYTHONQT_QTALL_INCLUDE_DIR PythonQt_QtAll.h
+  PATHS "${PYTHONQT_INSTALL_DIR}/include/PythonQt" "${PYTHONQT_INSTALL_DIR}/include/PythonQt5"
+  PATH_SUFFIXES "extensions/PythonQt_QtAll"
+  DOC "Path to the PythonQt QtAll extension include directory")
+
+SET(PYTHONQT_INCLUDE_DIR
+  ${PYTHONQT_INCLUDE_DIR}
+  ${PYTHONQT_QTALL_INCLUDE_DIR}
+  )
 
 SET(PYTHONQT_LIBRARIES)
+IF(PROJECT_USE_QT4)
+  SET(PYTHONQT_LIBRARIES_SUFFIX "-Qt4-Python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}")
+  SET(PYTHONQT_LIBRARIES_SUFFIX_MAJOR "-Qt4-Python${PYTHON_VERSION_MAJOR}")
+ELSE(PROJECT_USE_QT4)
+  SET(PYTHONQT_LIBRARIES_SUFFIX "-Qt5-Python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}")
+  SET(PYTHONQT_LIBRARIES_SUFFIX_MAJOR "-Qt5-Python${PYTHON_VERSION_MAJOR}")
+ENDIF(PROJECT_USE_QT4)
+
+
 
 MACRO(_SEARCH_FOR COMPONENT)
   STRING(TOUPPER ${COMPONENT} _COMP_UPPERCASE)
   FIND_LIBRARY(${_COMP_UPPERCASE}_LIBRARY
-    NAMES ${COMPONENT}
+    NAMES ${COMPONENT} "${COMPONENT}${PYTHONQT_LIBRARIES_SUFFIX}" "${COMPONENT}${PYTHONQT_LIBRARIES_SUFFIX_MAJOR}"
     PATHS "${PYTHONQT_INSTALL_DIR}/lib"
     DOC "The ${COMPONENT} library.")
   IF(NOT ${${_COMP_UPPERCASE}_LIBRARY} STREQUAL "${_COMP_UPPERCASE}_LIBRARY-NOTFOUND")
--- src/gui/pythonwidget.cc.orig	2020-04-29 00:44:24.000000000 +0200
+++ src/gui/pythonwidget.cc	2020-06-30 14:01:54.655063233 +0200
@@ -22,7 +22,7 @@
 #include <PythonQt.h>
 #include <gui/PythonQtScriptingConsole.h>
 #include <PythonQtClassInfo.h>
-#include <PythonQt_QtBindings.h>
+#include <PythonQt_QtAll.h>
 
 #include <boost/python.hpp>
 
@@ -35,8 +35,7 @@
 
 namespace bp = boost::python;
 
-BOOST_PYTHON_MODULE(gepettogui_internals)
-{
+BOOST_PYTHON_MODULE(gepettogui_internals) {
   exposeOSG();
   exposeGV();
   exposeGG();
@@ -47,8 +46,7 @@
 
     namespace gui {
       namespace {
-        void addSignalHandler (PythonQtObjectPtr obj, const QString& callable,
-            QObject* sender, const char* signal) {
+void addSignalHandler(PythonQtObjectPtr obj, const QString& callable, QObject* sender, const char* signal) {
           PythonQt* pqt = PythonQt::self();
           PythonQtObjectPtr call = pqt->lookupCallable(obj, callable);
           if (call.isNull()) {
@@ -56,21 +54,16 @@
             return;
           }
           if (!pqt->addSignalHandler(sender, signal, call)) {
-            qDebug() << "Signal" << signal << "not found in object"
-              << sender->objectName();
+    qDebug() << "Signal" << signal << "not found in object" << sender->objectName();
           } else {
-            qDebug() << "Connected"
-              << signal << "of" << sender->objectName()
-              << "to" << callable;
+    qDebug() << "Connected" << signal << "of" << sender->objectName() << "to" << callable;
           }
         }
 
         const QString var = "pluginInstance";
-      }
+}  // namespace
 
-      PythonWidget::PythonWidget(QWidget *parent) :
-        QDockWidget("&PythonQt console", parent)
-      {
+PythonWidget::PythonWidget(QWidget* parent) : QDockWidget("&PythonQt console", parent) {
         PyImport_AppendInittab("gepettogui_internals",
 #if PY_MAJOR_VERSION==3
             &PyInit_gepettogui_internals
@@ -81,7 +74,7 @@
 
         setObjectName ("gepetto-gui.pythonqtconsole");
         PythonQt::init(PythonQt::RedirectStdOut);
-        PythonQt_init_QtBindings();
+  PythonQt_QtAll::init();
         PythonQtObjectPtr mainContext = PythonQt::self()->getMainModule();
         PythonQtObjectPtr sys = PythonQt::self()->importModule ("sys");
         sys.evalScript ("argv = ['gepetto-gui']");
@@ -90,8 +83,7 @@
 
         PythonQt::self()->addDecorators (new PythonDecorator());
 
-        PythonQt::self()->registerQObjectClassNames(QStringList()
-            << "BodyTreeWidget"
+  PythonQt::self()->registerQObjectClassNames(QStringList() << "BodyTreeWidget"
             << "BodyTreeItem"
             << "SelectionEvent"
             << "MainWindow");
@@ -102,8 +94,7 @@
         console_->QTextEdit::clear();
         console_->consoleMessage(
             "PythonQt command prompt\n"
-            "Use Shift+Enter for multiline code.\n"
-            );
+      "Use Shift+Enter for multiline code.\n");
         console_->appendCommandPrompt();
 
         QWidget* widget = new QWidget;
@@ -122,15 +113,13 @@
         bp::import ("gepettogui_internals");
       }
 
-      PythonWidget::~PythonWidget()
-      {
+PythonWidget::~PythonWidget() {
         foreach (const PythonQtObjectPtr& m, modules_)
           unloadModulePlugin(m);
 	PythonQt::cleanup();
       }
 
-      void PythonWidget::browseFile()
-      {
+void PythonWidget::browseFile() {
         QFileDialog* fd = new QFileDialog;
 
         fd->setFileMode(QFileDialog::ExistingFile);
@@ -145,39 +134,29 @@
         fd->deleteLater();
       }
 
-      void PythonWidget::saveHistory (QSettings& settings)
-      {
+void PythonWidget::saveHistory(QSettings& settings) {
         settings.beginGroup("pythonqt");
         QStringList history = console_->history ();
         int limit = 200;
         int start = std::max(history.length() - limit, 0);
         QList<QVariant> h;
-        foreach (QString s, history.mid(start)) {
-          h << s;
-        }
+  foreach (QString s, history.mid(start)) { h << s; }
         settings.setValue("history", h);
         settings.endGroup();
       }
 
-      void PythonWidget::restoreHistory (QSettings& settings)
-      {
+void PythonWidget::restoreHistory(QSettings& settings) {
         settings.beginGroup("pythonqt");
         QList<QVariant> h = settings.value("history").toList();
         QStringList history;
-        foreach(QVariant v, h) {
-          history << v.toString();
-        }
+  foreach (QVariant v, h) { history << v.toString(); }
         console_->setHistory (history);
         settings.endGroup();
       }
 
-      bool PythonWidget::hasPlugin (const QString& name)
-      {
-        return modules_.contains (name);
-      }
+bool PythonWidget::hasPlugin(const QString& name) { return modules_.contains(name); }
 
-      void PythonWidget::loadScriptPlugin(QString moduleName, QString fileName)
-      {
+void PythonWidget::loadScriptPlugin(QString moduleName, QString fileName) {
         PythonQt* pqt = PythonQt::self();
         PythonQtObjectPtr module = pqt->createModuleFromFile (moduleName, fileName);
         if (pqt->handleError()) {
@@ -185,15 +164,13 @@
           return;
         }
         if (module.isNull()) {
-          qDebug() << "Enable to load module" << moduleName << "from script"
-            << fileName;
+    qDebug() << "Enable to load module" << moduleName << "from script" << fileName;
           return;
         }
         loadPlugin (moduleName, module);
       }
 
-      void PythonWidget::runScript(QString fileName)
-      {
+void PythonWidget::runScript(QString fileName) {
         PythonQt* pqt = PythonQt::self();
         PythonQtObjectPtr mainContext = pqt->getMainModule();
         mainContext.evalFile(fileName);
@@ -204,8 +181,7 @@
         }
       }
 
-      void PythonWidget::loadModulePlugin(QString moduleName)
-      {
+void PythonWidget::loadModulePlugin(QString moduleName) {
         PythonQt* pqt = PythonQt::self();
         PythonQtObjectPtr module = pqt->importModule (moduleName);
         if (pqt->handleError()) {
@@ -219,13 +195,13 @@
         loadPlugin (moduleName, module);
       }
 
-      void PythonWidget::loadPlugin(QString moduleName, PythonQtObjectPtr module)
-      {
+void PythonWidget::loadPlugin(QString moduleName, PythonQtObjectPtr module) {
         PythonQt* pqt = PythonQt::self();
         MainWindow* main = MainWindow::instance();
         module.addObject("windowsManager", main->osg().get());
 
-        QVariantList args; args << QVariant::fromValue((QObject*)main);
+  QVariantList args;
+  args << QVariant::fromValue((QObject*)main);
         QVariant instance = module.call("Plugin", args);
         module.addVariable(var, instance);
 
@@ -237,8 +213,7 @@
         modules_[moduleName] = module;
       }
 
-      void PythonWidget::unloadModulePlugin(QString moduleName)
-      {
+void PythonWidget::unloadModulePlugin(QString moduleName) {
         if (modules_.contains(moduleName)) {
           PythonQtObjectPtr module = modules_.value(moduleName);
           unloadModulePlugin(module);
@@ -246,8 +221,7 @@
         }
       }
 
-      void PythonWidget::unloadModulePlugin(PythonQtObjectPtr module )
-      {
+void PythonWidget::unloadModulePlugin(PythonQtObjectPtr module) {
         PythonQt* pqt = PythonQt::self();
         QVariant instance = pqt->getVariable(module, var);
         QDockWidget* dw = qobject_cast<QDockWidget*>(instance.value<QObject*>());
@@ -255,41 +229,33 @@
         module.removeVariable (var);
       }
 
-      void PythonWidget::addToContext(QString const& name, QObject* obj)
-      {
+void PythonWidget::addToContext(QString const& name, QObject* obj) {
         PythonQtObjectPtr mainContext = PythonQt::self()->getMainModule();
         mainContext.addObject(name, obj);
       }
 
-      void PythonWidget::addSignalHandlersToPlugin(PythonQtObjectPtr plugin)
-      {
+void PythonWidget::addSignalHandlersToPlugin(PythonQtObjectPtr plugin) {
         MainWindow* main = MainWindow::instance();
-        addSignalHandler(plugin, "osgWidget",
-            main, SIGNAL(viewCreated(OSGWidget*)));
+  addSignalHandler(plugin, "osgWidget", main, SIGNAL(viewCreated(OSGWidget*)));
         QAction* reconnect = main->findChild<QAction*>("actionReconnect");
         if (reconnect)
-          addSignalHandler(plugin, "resetConnection",
-              reconnect, SIGNAL(triggered()));
+    addSignalHandler(plugin, "resetConnection", reconnect, SIGNAL(triggered()));
         else
           qDebug() << "Could not find actionReconnect button. The plugin will"
             << "not be able to reset CORBA connections";
         QAction* refresh = main->findChild<QAction*>("actionRefresh");
         if (refresh)
-          addSignalHandler(plugin, "refreshInterface",
-              refresh, SIGNAL(triggered()));
+    addSignalHandler(plugin, "refreshInterface", refresh, SIGNAL(triggered()));
         else
           qDebug() << "Could not find actionRefresh button. The plugin will"
             << "not be able to refresh interface.";
       }
 
-      QVariantList PythonWidget::callPluginMethod (const QString& method,
-          const QVariantList& args,
-          const QVariantMap& kwargs) const
-      {
+QVariantList PythonWidget::callPluginMethod(const QString& method, const QVariantList& args,
+                                            const QVariantMap& kwargs) const {
         PythonQt* pqt = PythonQt::self();
         QVariantList ret;
-        foreach (const PythonQtObjectPtr& m, modules_)
-        {
+  foreach (const PythonQtObjectPtr& m, modules_) {
           PythonQtObjectPtr dockPyObj = pqt->lookupObject(m,var);
           PythonQtObjectPtr call = pqt->lookupCallable(dockPyObj, method);
           if (!call.isNull()) {
@@ -298,5 +264,5 @@
         }
         return ret;
       }
-    }
-}
+}  // namespace gui
+}  // namespace gepetto
