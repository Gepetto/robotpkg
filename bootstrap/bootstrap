#!/bin/sh
#
# Copyright (c) 2006 LAAS/CNRS                        --  Sun Oct  1 2006
# All rights reserved.
#
# Redistribution  and  use in source   and binary forms,  with or without
# modification, are permitted provided that  the following conditions are
# met:
#
#   1. Redistributions  of  source code must  retain  the above copyright
#      notice, this list of conditions and the following disclaimer.
#   2. Redistributions in binary form must  reproduce the above copyright
#      notice,  this list of  conditions and  the following disclaimer in
#      the  documentation   and/or  other  materials   provided with  the
#      distribution.
#
# This project includes software developed by the NetBSD Foundation, Inc.
# and its contributors. It is derived from the 'pkgsrc' project
# (http://www.pkgsrc.org).
#
# From $NetBSD: bootstrap,v 1.88 2006/11/06 21:08:42 tv Exp $
# Copyright (c) 2001-2002 Alistair G. Crooks.
#
#   3. All advertising materials mentioning   features or use of this
#      software must display the following acknowledgement:
#	This product includes software developed by Alistair G. Crooks
#	for the NetBSD project.
#   4. Neither the  name  of The NetBSD Foundation  nor the names  of its
#      contributors  may be  used to endorse or promote  products derived
#      from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES   OF MERCHANTABILITY AND  FITNESS  FOR  A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO  EVENT SHALL THE AUTHOR OR  CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING,  BUT  NOT LIMITED TO, PROCUREMENT  OF
# SUBSTITUTE  GOODS OR SERVICES;  LOSS   OF  USE,  DATA, OR PROFITS;   OR
# BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# where the building takes place
bootstrapdir=`dirname "$0"`
bootstrapdir=`cd "${bootstrapdir}" && pwd`
pkgsrcdir=`dirname "${bootstrapdir}"`
wrkdir="`pwd`/work"

usage="Usage: $0 "'
    [ --workdir <workdir> ]
    [ --prefix <prefix> ]
    [ --pkgdbdir <pkgdbdir> ]
    [ --pkgmandir <pkgmandir> ]
    [ --sysconfdir <sysconfdir> ]
    [ --varbase <varbase> ]
    [ --fetch-cmd <ftp command> ]
    [ --compiler <compiler> ]
    [ --help ]'

opsys=`uname -s | tr -d /`

die()
{
	echo >&2 "$@"
	exit 1
}

echo_msg()
{
    echo "===> $@"
}

check_prog()
{
    _var="$1"; _name="$2"

    eval _tmp=\"\$$_var\"
    if [ "x$_tmp" != "x" ]; then
	# Variable is already set (by the user, for example)
	return 0
    fi

    for _d in `echo $PATH | tr ':' ' '`; do
	if [ -x "$_d/$_name" ]; then
	    # Program found
	    eval $_var=\""$_d/$_name"\"
	    return 1
	fi
    done

    die "$_name not found in path."
}

# run a command, abort if it fails
run_cmd()
{
    echo_msg "running: $@"
    eval "$@"
    ret=$?
    if [ $ret -ne 0 ]; then
	echo_msg "exited with status $ret"
	die "aborted."
    fi
}

mkdir_p()
{
    run_cmd "mkdir -p $@"
}

copy_src()
{
    _src="$1"; _dst="$2"
    if [ ! -d $wrkdir/$_dst ]; then
	mkdir_p $wrkdir/$_dst
    fi
    $cpprog -r $_src/* $wrkdir/$_dst
}

get_optarg()
{
    expr "x$1" : "x[^=]*=\\(.*\\)"
}

build_start=`date`
echo_msg "bootstrap command: $0 $@"
echo_msg "bootstrap started: $build_start"

# user configurable options
prefix=
pkgdbdir=
mandir=
sysconfdir=
varbase=
compiler=""
gmake=gmake

while [ $# -gt 0 ]; do
	case $1 in
	--workdir=*)	wrkdir=`get_optarg "$1"` ;;
	--workdir)	wrkdir="$2"; shift ;;
	--prefix=*)	prefix=`get_optarg "$1"` ;;
	--prefix)	prefix="$2"; shift ;;
	--pkgdbdir=*)	pkgdbdir=`get_optarg "$1"` ;;
	--pkgdbdir)	pkgdbdir="$2"; shift ;;
	--mandir=*)	mandir=`get_optarg "$1"` ;;
	--mandir)	mandir="$2"; shift ;;
	--sysconfdir=*)	sysconfdir=`get_optarg "$1"` ;;
	--sysconfdir)	sysconfdir="$2"; shift ;;
	--varbase=*)	varbase=`get_optarg "$1"` ;;
	--varbase)	varbase="$2"; shift ;;
	--fetch-cmd=*)	fetch_cmd=`get_optarg "$1"` ;;
	--fetch-cmd)	fetch_cmd="$a"; shift ;;
	--compiler=*)	compiler=`get_optarg "$1"` ;;
	--compiler)	compiler="$2"; shift ;;
	--help)		echo "$usage"; exit ;;
	-h)		echo "$usage"; exit ;;
	--*)		echo "$usage"; exit 1 ;;
	esac
	shift
done

# set defaults for system locations if not already set by the user
[ -z "$prefix" ] && prefix=${HOME}/openrobots
[ -z "$pkgdbdir" ] && pkgdbdir=${prefix}/var/db/pkg
[ -z "$varbase" ] && varbase=${prefix}/var
[ -z "$mandir" ] && mandir=${prefix}/man
[ -z "$sysconfdir" ] && sysconfdir=${prefix}/etc

case "$opsys" in
Darwin)
	machine_arch=`uname -p`
	;;
Linux)
	if [ -f /etc/debian_version ]; then
		DEBIAN=yes
	fi
	machine_arch=`uname -m | sed -e 's/i.86/i386/' -e 's/ppc/powerpc/'`
	;;
esac

# export OPSYS and MACHINE_ARCH for pkg_install. we only set
# MACHINE_ARCH on platforms where we override bmake's value.
OPSYS=${opsys}
export OPSYS
if [ "${machine_arch}" != "" ]; then
	MACHINE_ARCH=${machine_arch}
	export MACHINE_ARCH
fi

if [ -n "$CP" ]; then
    cpprog="$CP"
else
    check_prog cpprog cp
fi



# build libnbcompat
echo_msg "Building libnbcompat"
copy_src $pkgsrcdir/pkgtools/libnbcompat/files libnbcompat
run_cmd "(cd $wrkdir/libnbcompat; \
    $shprog ./configure -C --prefix=$prefix --mandir=$mandir --sysconfdir=$sysconfdir && $gmake)"

# set up an example mk.conf file
MKCONF_EXAMPLE=${wrkdir}/robotpkg.conf.example
export MKCONF_EXAMPLE
echo_msg "Creating robotpkg.conf.example in ${wrkdir}"
echo "# Example ${sysconfdir}/mk.conf file produced by bootstrap-robotpkg" > ${MKCONF_EXAMPLE}
echo "# `date`" >> ${MKCONF_EXAMPLE}
echo "" >> ${MKCONF_EXAMPLE}

if [ "$compiler" != "" ]; then
	echo "ROBOTPKG_COMPILER=	$compiler" >> ${MKCONF_EXAMPLE}
fi

# save environment in example mk.conf
echo "PKG_DBDIR=		$pkgdbdir" >> ${MKCONF_EXAMPLE}
echo "LOCALBASE=		$prefix" >> ${MKCONF_EXAMPLE}
echo "VARBASE=		$varbase" >> ${MKCONF_EXAMPLE}
if [ "${sysconfdir}" != "${prefix}/etc" ]; then
	echo "PKG_SYSCONFBASE=	$sysconfdir" >> ${MKCONF_EXAMPLE}
fi
echo "PKG_TOOLS_BIN=		$prefix/sbin" >> ${MKCONF_EXAMPLE}
echo "" >> ${MKCONF_EXAMPLE}

# create directories
mkdir_p $prefix $pkgdbdir $prefix/sbin
mkdir_p $mandir/man1 $mandir/cat1
mkdir_p $mandir/man8 $mandir/cat8

# boostrap ftp if needed
if [ -z "$fetch_cmd" ]; then
	need_ftp=yes
else
	need_ftp=no
fi

case "$need_ftp" in
yes)	# bootstrap tnftp
	fetch_cmd="$prefix/bin/ftp"
	case "$DEBIAN" in
	yes)
		LIBS="-lncurses"
		;;
	esac
	echo_msg "Installing tnftp"
	copy_src $pkgsrcdir/pkgtools/tnftp/files tnftp
	run_cmd "(cd $wrkdir/tnftp; env $BSTRAP_ENV CPPFLAGS=\"$CPPFLAGS\" $shprog ./configure $configure_quiet_flags --prefix=$prefix --mandir=$mandir --sysconfdir=$sysconfdir && $gmake && (cd src && $gmake install))"
	;;
esac

pkg_install_args="$pkg_install_args --with-ftp=$fetch_cmd"

FETCH_CMD="$fetch_cmd"
export FETCH_CMD
echo "FETCH_CMD=			$fetch_cmd" >> ${MKCONF_EXAMPLE}

# we need NetBSD's pax to make binary packages
echo_msg "Installing pax"
copy_src $pkgsrcdir/pkgtools/pax/files pax
run_cmd "(cd $wrkdir/pax; env $BSTRAP_ENV CPPFLAGS='$CPPFLAGS -I../libnbcompat' LDFLAGS='$LDFLAGS -L../libnbcompat' LIBS='-lnbcompat' $shprog ./configure $configure_quiet_flags -C --prefix=$prefix --mandir=$mandir --sysconfdir=$sysconfdir && $gmake && $gmake install)"
echo "TOOLS_PLATFORM.pax?=		$prefix/bin/pax" >> ${MKCONF_EXAMPLE}
echo "TOOLS_PLATFORM.tar?=		$prefix/bin/tar" >> ${MKCONF_EXAMPLE}
pkg_install_args="$pkg_install_args --with-pax=$prefix/bin/pax --with-tar=$prefix/bin/tar"

# bootstrap pkg_install
echo_msg "Installing package administrative tools"
copy_src $pkgsrcdir/pkgtools/pkg_install/files pkg_install
run_cmd "(cd $wrkdir/pkg_install; \
    env $BSTRAP_ENV			\
    CPPFLAGS='$CPPFLAGS -I../libnbcompat -I../../libnbcompat'	\
    LDFLAGS='$LDFLAGS -L../libnbcompat -L../../libnbcompat'	\
    LIBS='-lnbcompat' \
    $shprog ./configure -C --prefix=$prefix --sysconfdir=$sysconfdir --with-pkgdbdir=$pkgdbdir --mandir=$mandir $pkg_install_args && $gmake && $gmake install)"

# preserve compiler and tool environment variables settings
test -z "$CP" || echo "TOOLS_PLATFORM.cp?=		$CP" >> ${MKCONF_EXAMPLE}
test -z "$GREP" || echo "TOOLS_PLATFORM.grep?=		$GREP" >> ${MKCONF_EXAMPLE}
test -z "$ID" || echo "TOOLS_PLATFORM.id?=		$ID" >> ${MKCONF_EXAMPLE}
test -z "$MKDIR" || echo "TOOLS_PLATFORM.mkdir?=		$MKDIR" >> ${MKCONF_EXAMPLE}
test -z "$TEST" || echo "TOOLS_PLATFORM.test?=		$TEST" >> ${MKCONF_EXAMPLE}
test -z "$TOUCH" || echo "TOOLS_PLATFORM.touch?=		$TOUCH" >> ${MKCONF_EXAMPLE}
test -z "$XARGS" || echo "TOOLS_PLATFORM.xargs?=		$XARGS" >> ${MKCONF_EXAMPLE}
test -z "$CFLAGS" || (
	echo "CFLAGS+=		$CFLAGS" >> ${MKCONF_EXAMPLE}
	echo "DBG=			# prevent DBG from adding default optimizer flags" >> ${MKCONF_EXAMPLE}
)
test -z "$CPPFLAGS" || echo "CPPFLAGS+=		$CPPFLAGS" >> ${MKCONF_EXAMPLE}
test -z "$LDFLAGS" || echo "LDFLAGS+=		$LDFLAGS" >> ${MKCONF_EXAMPLE}

echo "" >> ${MKCONF_EXAMPLE}

# register packages
# usage: register_package <packagedirectory> [additional arguments]
register_package() {
	run_cmd "(cd $pkgsrcdir/$1 && $gmake MAKECONF=${MKCONF_EXAMPLE} WRKOBJDIR=${wrkobjdir} ${2-} bootstrap-register)"
}

echo_msg "Registering installed packages"
case "$need_ftp" in
yes)	register_package "pkgtools/tnftp";;
esac
register_package "pkgtools/pax"
register_package "pkgtools/pkg_install"

# Install the man page.
echo_msg "Installing packages(7) man page"
run_cmd "(cd $pkgsrcdir/pkgtools/pkgmanpages && $gmake PKG_VERBOSE=yes MAKECONF=${MKCONF_EXAMPLE} WRKOBJDIR=$wrkobjdir CREATE_WRKDIR_SYMLINK=no install)"

# Install sample config file.
mkdir_p ${sysconfdir}
run_cmd $cpprog ${MKCONF_EXAMPLE} ${sysconfdir}/robotpkg.conf 

hline="==========================================================================="
echo ""
echo "$hline"
echo ""
echo "Please remember to add $prefix/sbin to your PATH variable"
echo "or set ROBOTPKG_BASE to $prefix in your environment."
echo "You can optionnaly add $mandir to your MANPATH"
echo "environment variable, echo if necessary."
echo ""
echo "An example robotpkg.conf file with the settings you provided to \"bootstrap\""
echo "has been created for you. It can be found in:"
echo ""
echo "      ${sysconfdir}/robotpkg.conf"
echo ""
echo "You can find extensive documentation of the robotics packages collection"
echo "in $pkgsrcdir/doc/pkgsrc.txt and packages(7)."
echo ""
echo "Hopefully everything is now complete."
echo "Thank you"
echo ""
echo "$hline"
echo ""

echo_msg "bootstrap started: $build_start"
echo_msg "bootstrap ended:   `date`"

exit 0
