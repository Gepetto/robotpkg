From da273d644d178b95caa55d255c48688e1b37074b Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@laas.fr>
Date: Thu, 19 Nov 2020 18:49:36 +0100
Subject: [PATCH 1/3] Add missing implementation of
 PathOptimizer::maxIterations and timeOut

---
 src/path-optimizer.cc | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/src/path-optimizer.cc b/src/path-optimizer.cc
index caa580f1..cc68a950 100644
--- src/path-optimizer.cc
+++ src/path-optimizer.cc
@@ -74,6 +74,16 @@ namespace hpp {
       timeOut_ = problem().getParameter ("PathOptimizer/timeOut").floatValue();
     }
 
+    void PathOptimizer::maxIterations (const unsigned long int& n)
+    {
+      maxIterations_ = n;
+    }
+
+    void PathOptimizer::timeOut(const double& timeOut)
+    {
+      timeOut_ = timeOut;
+    }
+
     // ----------- Declare parameters ------------------------------------- //
 
     HPP_START_PARAMETER_DECLARATION(PathOptimizer)

From db35c23e0c11bd1db29b4335bbab2c776e397685 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@laas.fr>
Date: Fri, 20 Nov 2020 12:27:55 +0100
Subject: [PATCH 2/3] BiRRT* supports constraints

- Not sure this is theoretically sound in general but it allows to lock
joints.
- TODO handle path projection ?
---
 src/path-planner/bi-rrt-star.cc | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/path-planner/bi-rrt-star.cc b/src/path-planner/bi-rrt-star.cc
index 80f77271..6e5bd41e 100644
--- src/path-planner/bi-rrt-star.cc
+++ src/path-planner/bi-rrt-star.cc
@@ -302,6 +302,10 @@ namespace hpp {
         if (dist < 1e-16)
           return false;
 
+        if (problem().constraints()
+            && !problem().constraints()->apply(q))
+          return false;
+
         PathPtr_t path = buildPath(*near->configuration(), q, extendMaxLength_, true);
         if (!path || path->length() < 1e-10) return false;
         q = path->end();

From 769fbff156d5a23f029c1e55813603cd38fdba5d Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@laas.fr>
Date: Fri, 20 Nov 2020 12:29:06 +0100
Subject: [PATCH 3/3] Use ProblemSolverPtr_t instead of ProblemSolver*

---
 include/hpp/core/plugin.hh | 2 +-
 src/plugin.cc              | 2 +-
 src/problem-solver.cc      | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/hpp/core/plugin.hh b/include/hpp/core/plugin.hh
index 763d63a5..53ae2bfc 100644
--- include/hpp/core/plugin.hh
+++ include/hpp/core/plugin.hh
@@ -89,7 +89,7 @@ namespace hpp {
       /// 1. Call \ref findPluginLibrary
       /// 2. Call dlopen and handle errors
       /// 3. ProblemSolverPlugin::initialize with \c ps
-      bool loadPlugin (const std::string& lib, ProblemSolver* ps);
+      bool loadPlugin (const std::string& lib, ProblemSolverPtr_t ps);
     } // namespace plugin
 
     /// \}
diff --git a/src/plugin.cc b/src/plugin.cc
index f0892ddd..533a608d 100644
--- src/plugin.cc
+++ src/plugin.cc
@@ -46,7 +46,7 @@ namespace hpp {
             << ". Check your LD_LIBRARY_PATH.");
       }
 
-      bool loadPlugin (const std::string& lib, ProblemSolver* ps)
+      bool loadPlugin (const std::string& lib, ProblemSolverPtr_t ps)
       {
         typedef ::hpp::core::ProblemSolverPlugin* (*PluginFunction_t) ();
 
diff --git a/src/problem-solver.cc b/src/problem-solver.cc
index ce9743a0..112f0ef2 100755
--- src/problem-solver.cc
+++ src/problem-solver.cc
@@ -176,7 +176,7 @@ namespace hpp {
 
     ProblemSolverPtr_t ProblemSolver::create ()
     {
-      return new ProblemSolver ();
+      return ProblemSolverPtr_t(new ProblemSolver ());
     }
 
     ProblemSolver::ProblemSolver () :
