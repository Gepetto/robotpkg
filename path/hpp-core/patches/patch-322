From 1fdede4825fe3f406bc64b9cde95343eac96aa87 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@eurekarobotics.com>
Date: Wed, 19 Jul 2023 14:12:34 +0200
Subject: [PATCH 1/3] allow to change the break distance in continuous
 validation

---
 include/hpp/core/continuous-validation.hh     |  9 ++++++++
 .../solid-solid-collision.hh                  |  4 ++++
 src/continuous-validation.cc                  | 23 +++++++++++++++++--
 .../solid-solid-collision.cc                  |  5 ++++
 4 files changed, 39 insertions(+), 2 deletions(-)

diff --git a/include/hpp/core/continuous-validation.hh b/include/hpp/core/continuous-validation.hh
index 9ff6c732..58e5fe87 100644
--- include/hpp/core/continuous-validation.hh
+++ include/hpp/core/continuous-validation.hh
@@ -211,6 +211,14 @@ class HPP_CORE_DLLAPI ContinuousValidation : public PathValidation,
   /// Get tolerance value
   value_type tolerance() const { return tolerance_; }
 
+  /// Get the break distance passed to collision checking.
+  /// \sa hpp::fcl::CollisionRequest::break_distance
+  value_type breakDistance() const { return breakDistance_; }
+
+  /// Set the break distance passed to collision checking.
+  /// \sa value_type breakDistance() const
+  void breakDistance(value_type distance);
+
   DevicePtr_t robot() const { return robot_; }
   /// Iteratively call method doExecute of delegate classes Initialize
   /// \sa ContinuousValidation::add, ContinuousValidation::Initialize.
@@ -291,6 +299,7 @@ class HPP_CORE_DLLAPI ContinuousValidation : public PathValidation,
 
   DevicePtr_t robot_;
   value_type tolerance_;
+  value_type breakDistance_;
 
   /// Store weak pointer to itself.
   void init(ContinuousValidationWkPtr_t weak);
diff --git a/include/hpp/core/continuous-validation/solid-solid-collision.hh b/include/hpp/core/continuous-validation/solid-solid-collision.hh
index 0f7301eb..3eb153c0 100644
--- include/hpp/core/continuous-validation/solid-solid-collision.hh
+++ include/hpp/core/continuous-validation/solid-solid-collision.hh
@@ -80,6 +80,10 @@ class HPP_CORE_DLLAPI SolidSolidCollision : public BodyPairCollision {
 
   bool removeObjectTo_b(const CollisionObjectConstPtr_t& object);
 
+  /// Set the break distance of each hpp::fcl::CollisionRequest
+  /// \sa void ContinuousValidation::breakDistance(value_type) const
+  void breakDistance(value_type distance);
+
   std::string name() const;
 
   std::ostream& print(std::ostream& os) const;
diff --git a/src/continuous-validation.cc b/src/continuous-validation.cc
index 15abea3f..ba354744 100644
--- src/continuous-validation.cc
+++ src/continuous-validation.cc
@@ -85,6 +85,7 @@ void ContinuousValidation::Initialize::doExecute() const {
       assert(joint2);
       continuousValidation::SolidSolidCollisionPtr_t ss(
           SolidSolidCollision::create(joint2, joint1, owner().tolerance_));
+      ss->breakDistance(owner().breakDistance());
       owner().addIntervalValidation(ss);
       bodyPairMap[jp] = ss;
     }
@@ -108,8 +109,10 @@ void ContinuousValidation::AddObstacle::doExecute(
     if (body) {
       ConstObjectStdVector_t objects;
       objects.push_back(object);
-      owner().addIntervalValidation(
+      continuousValidation::SolidSolidCollisionPtr_t ss(
           SolidSolidCollision::create(joint, objects, owner().tolerance()));
+      ss->breakDistance(owner().breakDistance());
+      owner().addIntervalValidation(ss);
     }
   }
 }
@@ -248,6 +251,18 @@ void ContinuousValidation::removeObstacleFromJoint(
   }
 }
 
+void ContinuousValidation::breakDistance(value_type distance) {
+  assert(distance >= 0);
+  breakDistance_ = distance;
+
+  bodyPairCollisionPool_.clear();
+  for (IntervalValidationPtr_t &val : intervalValidations_) {
+    continuousValidation::SolidSolidCollisionPtr_t ss(
+        HPP_DYNAMIC_PTR_CAST(continuousValidation::SolidSolidCollision, val));
+    if (ss) ss->breakDistance(distance);
+  }
+}
+
 void ContinuousValidation::filterCollisionPairs(
     const RelativeMotion::matrix_type &relMotion) {
   // Loop over collision pairs and remove disabled ones.
@@ -391,7 +406,11 @@ ContinuousValidation::~ContinuousValidation() {}
 
 ContinuousValidation::ContinuousValidation(const DevicePtr_t &robot,
                                            const value_type &tolerance)
-    : robot_(robot), tolerance_(tolerance), intervalValidations_(), weak_() {
+    : robot_(robot),
+      tolerance_(tolerance),
+      breakDistance_(1e-2),
+      intervalValidations_(),
+      weak_() {
   if (tolerance < 0) {
     throw std::runtime_error("tolerance should be non-negative.");
   }
diff --git a/src/continuous-validation/solid-solid-collision.cc b/src/continuous-validation/solid-solid-collision.cc
index 043c430d..99002804 100644
--- src/continuous-validation/solid-solid-collision.cc
+++ src/continuous-validation/solid-solid-collision.cc
@@ -121,6 +121,11 @@ bool SolidSolidCollision::removeObjectTo_b(
   return last != s;
 }
 
+void SolidSolidCollision::breakDistance(value_type breakDistance) {
+  for (fcl::CollisionRequest& req : requests())
+    req.break_distance = breakDistance;
+}
+
 void SolidSolidCollision::addCollisionPair(
     const CollisionObjectConstPtr_t& left,
     const CollisionObjectConstPtr_t& right) {

From 7973da4a0dc4c85907e64c3161298cc39c6c5163 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@eurekarobotics.com>
Date: Wed, 19 Jul 2023 14:48:00 +0200
Subject: [PATCH 2/3] Improve refining algo in continuous validation

---
 .../body-pair-collision.cc                    | 45 +++++++++++++------
 src/weighed-distance.cc                       |  2 +-
 2 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/src/continuous-validation/body-pair-collision.cc b/src/continuous-validation/body-pair-collision.cc
index 7e8af9c5..59df89c2 100644
--- src/continuous-validation/body-pair-collision.cc
+++ src/continuous-validation/body-pair-collision.cc
@@ -101,7 +101,10 @@ bool BodyPairCollision::validateConfiguration(
 }
 
 void BodyPairCollision::setupPath() {
-  if (HPP_DYNAMIC_PTR_CAST(StraightPath, path_)) refine_ = false;
+  if (HPP_DYNAMIC_PTR_CAST(StraightPath, path_))
+    refine_ = false;
+  else
+    refine_ = true;
   Vb_ = vector_t(path_->outputDerivativeSize());
   value_type t0 = path_->timeRange().first;
   value_type t1 = path_->timeRange().second;
@@ -118,32 +121,48 @@ void BodyPairCollision::setupPath() {
 value_type BodyPairCollision::collisionFreeInterval(
     const value_type& t, const value_type& distanceLowerBound,
     value_type& maxVelocity) const {
-  value_type T[3], Vm[2];
+  constexpr int Nrefine = 2;
+  value_type T[1 + 2 * Nrefine], Vm[1 + 2 * Nrefine];
   value_type tm, tM;
-  maxVelocity = maximalVelocity_;
+  Vm[0] = maxVelocity = maximalVelocity_;
   T[0] = distanceLowerBound / maxVelocity;
-  if (!refine_)
+  if (!refine_) {
+    if (T[0] < 1e-3) {
+      hppDout(notice,
+              "Small interval without refine: "
+              "maxVelocity = "
+                  << maxVelocity << " / T = " << T[0]
+                  << " / d = " << distanceLowerBound);
+    }
     return T[0];
-  else {
+  } else {
     tm = t - T[0];
     tM = t + T[0];
     bool leftIsValid = (tm < path_->timeRange().first);
     bool rightIsValid = (tM > path_->timeRange().second);
     if (leftIsValid && rightIsValid) return T[0];
 
-    for (int i = 0; i < 2; ++i) {
+    for (int i = 0; i < 2 * Nrefine; ++i) {
       tm = t - (leftIsValid ? 0 : T[i]);
       tM = t + (rightIsValid ? 0 : T[i]);
       path_->velocityBound(Vb_, tm, tM);
-      Vm[i] = computeMaximalVelocity(Vb_);
+      Vm[i + 1] = computeMaximalVelocity(Vb_);
       T[i + 1] = distanceLowerBound / Vm[i];
+      if (i % 2 == 1) {
+        assert(Vm[i - 1] >= Vm[i + 1] && Vm[i + 1] >= Vm[i] &&
+               T[i - 1] <= T[i + 1] && T[i + 1] <= T[i]);
+      }
+    }
+    constexpr int k = 2 * Nrefine;
+    maxVelocity = Vm[k];
+    if (T[k] < 1e-3) {
+      hppDout(notice,
+              "Small interval with refine: "
+              "maxVelocity = "
+                  << maxVelocity << " / T = " << T[k]
+                  << " / d = " << distanceLowerBound);
     }
-    assert(maximalVelocity_ >= Vm[1] && Vm[1] >= Vm[0] && T[1] >= T[2] &&
-           T[2] >= T[0]);
-    // hppDout (info, "Refine changed the interval length of " << T[0] / T[2] <<
-    // ", from " << T[0] << " to " << T[2]);
-    maxVelocity = Vm[1];
-    return T[2];
+    return T[k];
   }
 }
 
diff --git a/src/weighed-distance.cc b/src/weighed-distance.cc
index fa3a24e6..d056fac4 100644
--- src/weighed-distance.cc
+++ src/weighed-distance.cc
@@ -253,7 +253,7 @@ void WeighedDistance::computeWeights() {
       }
     }
   }
-  hppDout(info, "The weights are " << weights_);
+  hppDout(info, "The weights are " << weights_.transpose());
 }
 
 WeighedDistance::WeighedDistance(const DevicePtr_t& robot)

From 52030aed1afb98e76be383889895f00706e70447 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@eurekarobotics.com>
Date: Wed, 19 Jul 2023 15:01:11 +0200
Subject: [PATCH 3/3] add logs in Dichotomy::validateStraightPath

---
 src/continuous-validation/dichotomy.cc | 18 +++++++++++++++---
 1 file changed, 15 insertions(+), 3 deletions(-)

diff --git a/src/continuous-validation/dichotomy.cc b/src/continuous-validation/dichotomy.cc
index 7a8db0b5..64b8118e 100644
--- src/continuous-validation/dichotomy.cc
+++ src/continuous-validation/dichotomy.cc
@@ -32,6 +32,7 @@
 #include <hpp/core/path-vector.hh>
 #include <hpp/core/straight-path.hh>
 #include <hpp/util/debug.hh>
+#include <hpp/util/timer.hh>
 #include <iterator>
 
 #include "continuous-validation/helper.hh"
@@ -40,6 +41,9 @@
 namespace hpp {
 namespace core {
 namespace continuousValidation {
+
+HPP_DEFINE_TIMECOUNTER(CV_Dichotomy_validateStraightPath);
+
 DichotomyPtr_t Dichotomy::create(const DevicePtr_t& robot,
                                  const value_type& tolerance) {
   Dichotomy* ptr = new Dichotomy(robot, tolerance);
@@ -66,6 +70,8 @@ bool Dichotomy::validateStraightPath(IntervalValidations_t& bodyPairCollisions,
                                      const PathPtr_t& path,
                                      PathPtr_t& validPart,
                                      PathValidationReportPtr_t& report) {
+  HPP_START_TIMECOUNTER(CV_Dichotomy_validateStraightPath);
+
   // start by validating end of path
   bool finished = false;
   bool valid = true;
@@ -76,7 +82,9 @@ bool Dichotomy::validateStraightPath(IntervalValidations_t& bodyPairCollisions,
   validSubset.unionInterval(std::make_pair(t, t));
   Configuration_t q(path->outputSize());
   value_type t0, t1, tmin, tmax;
+  int niters = 0;
   while (!finished) {
+    ++niters;
     bool success = (*path)(q, t);
     PathValidationReportPtr_t pathReport;
     interval_t interval;
@@ -111,12 +119,16 @@ bool Dichotomy::validateStraightPath(IntervalValidations_t& bodyPairCollisions,
       tmax = validSubset.list().begin()->second;
     }
     validPart = path->extract(tmin, tmax);
-    return false;
   } else {
     validPart = path;
-    return true;
   }
-  return false;
+  HPP_STOP_AND_DISPLAY_TIMECOUNTER(CV_Dichotomy_validateStraightPath);
+  if (niters > 1000) {
+    hppDout(notice,
+            "nb iterations, path length: " << niters << ", " << path->length());
+    hppDout(info, "path: " << *path);
+  }
+  return valid;
 }
 
 void Dichotomy::init(const DichotomyWkPtr_t weak) {
