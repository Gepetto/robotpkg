From 46434a7595e007c290c22118251984e976b4a1a3 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@laas.fr>
Date: Thu, 12 Mar 2020 00:14:48 +0100
Subject: [PATCH 1/2] Enable to use GenericTransformation with a null joint2

---
 src/generic-transformation.cc        |  2 +-
 src/generic-transformation/helper.hh | 29 ++++++++++++++++------------
 2 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/src/generic-transformation.cc b/src/generic-transformation.cc
index 135c34e..b53c482 100644
--- src/generic-transformation.cc
+++ src/generic-transformation.cc
@@ -81,7 +81,7 @@ namespace hpp {
         << pretty_print (BlockIndex::fromLogicalExpression (activeParameters_)) << incindent
         << iendl << "Joint1: "         << ((IsRelative && joint1()) ? joint1()->name() : "World")
         << iendl << "Frame in joint 1" << incindent << iendl; pinocchio::display(os, frame1InJoint1()) << decindent
-        << iendl << "Joint2: "         << joint2()->name()
+        << iendl << "Joint2: "         << (joint2() ? joint2()->name() : "World")
         << iendl << "Frame in joint 2" << incindent << iendl; pinocchio::display(os, frame2InJoint2()) << decindent
         << iendl << "mask: ";
       for (size_type i=0; i<DerSize; ++i) os << mask_ [i] << ", ";
diff --git a/src/generic-transformation/helper.hh b/src/generic-transformation/helper.hh
index c0246c5..01a6d13 100644
--- src/generic-transformation/helper.hh
+++ src/generic-transformation/helper.hh
@@ -31,6 +31,8 @@ namespace hpp {
   namespace constraints {
 
     namespace {
+      inline const Transform3f& Id () { static const Transform3f id (Transform3f::Identity()); return id; }
+
       /// ------- Generic Transform Data ---------------------------------------
       template <bool rel> struct GTOriDataV {};
       template <> struct GTOriDataV<true>
@@ -51,14 +53,14 @@ namespace hpp {
         hpp::pinocchio::DeviceData& ddata () { return device.d(); }
 
         const JointJacobian_t& J2 () { return model.joint2->jacobian(ddata()); }
-        const Transform3f& M2 () { return model.joint2->currentTransformation(ddata()); }
-        const vector3_t& t2 () { return model.joint2->currentTransformation(ddata()).translation(); }
-        const matrix3_t& R2 () { return model.joint2->currentTransformation(ddata()).rotation(); }
+        const Transform3f& M2 () { if (model.joint2) return model.joint2->currentTransformation(ddata()); else return Id(); }
+        const vector3_t& t2 () { return M2().translation(); }
+        const matrix3_t& R2 () { return M2().rotation(); }
 
         const JointJacobian_t& J1 () { return model.getJoint1()->jacobian(this->ddata()); }
         const Transform3f& M1 () { return model.getJoint1()->currentTransformation(this->ddata()); }
-        const matrix3_t& R1 () { return model.getJoint1()->currentTransformation(this->ddata()).rotation(); }
-        const vector3_t& t1 () { return model.getJoint1()->currentTransformation(this->ddata()).translation(); }
+        const matrix3_t& R1 () { return M1().rotation(); }
+        const vector3_t& t1 () { return M1().translation(); }
 
         GTDataBase (const GenericTransformationModel<rel>& m, const DevicePtr_t& d)
           : device (d), model(m) {}
@@ -266,8 +268,9 @@ namespace hpp {
             GTDataJ<true, pos, true, ose3>& d,
             matrixOut_t J)
         {
-          d.tmpJac.noalias() = (d.R1().transpose() * d.R2()) * omega(d.J2());
-          d.tmpJac.noalias() -= omega(d.J1());
+          d.tmpJac.noalias() = -omega(d.J1());
+          if (d.model.joint2)
+            d.tmpJac.noalias() += (d.R1().transpose() * d.R2()) * omega(d.J2());
           assert (!ose3 || d.model.fullOri);
           assign_if<true>(!(ose3 || d.model.fullOri), d, J,
               d.Jlog_from1 * d.tmpJac,
@@ -277,8 +280,9 @@ namespace hpp {
             GTDataJ<true, true, ori, ose3>& d,
             matrixOut_t J)
         {
-          const JointJacobian_t& J1 (d.J1()); const JointJacobian_t& J2 (d.J2());
-          const matrix3_t&       R1 (d.R1()); const matrix3_t&       R2 (d.R2());
+          const JointJacobian_t& J1 (d.J1());
+          const matrix3_t&       R1 (d.R1());
+          const matrix3_t&       R2 (d.R2());
           const matrix3_t& R1inJ1 (d.model.F1inJ1.rotation ());
 
           // J = 1RT* 0RT1 ( A + B )
@@ -289,10 +293,11 @@ namespace hpp {
           // A = [ 0t2 - 0t1 0R2 2t* ]x 0R1 1Jw1
           // B = ( 0R2 2Jt2 - 0R1 1Jt1 - [ 0R2 2t* ]x 0R2 2Jw2 )
           d.tmpJac.noalias() = (- R1.transpose() * R1.colwise().cross(d.cross1) ) * omega(J1); // A
-          d.tmpJac.noalias() += ( R1.transpose() * R2 ) * trans(J2);  // B1
+          if (d.model.joint2)
+            d.tmpJac.noalias() += ( R1.transpose() * R2 ) * trans(d.J2());  // B1
           d.tmpJac.noalias() -= trans(J1); // B2
-          if (!d.model.t2isZero)
-            d.tmpJac.noalias() += R1.transpose() * R2.colwise().cross(d.cross2) * omega(J2); // B3
+          if (!d.model.t2isZero && d.model.joint2)
+            d.tmpJac.noalias() += R1.transpose() * R2.colwise().cross(d.cross2) * omega(d.J2()); // B3
           if (d.model.R1isID) assign_if<false>(!d.model.fullPos, d, J,                      d.tmpJac, 0);
           else                assign_if<false>(!d.model.fullPos, d, J, R1inJ1.transpose() * d.tmpJac, 0);
         }

From b2cc65c8b69913048bf9cec1bae66d84d6161e75 Mon Sep 17 00:00:00 2001
From: Joseph Mirabel <jmirabel@laas.fr>
Date: Tue, 5 May 2020 17:25:13 +0200
Subject: [PATCH 2/2] [Test] GenericTransformation with null joint2.

---
 tests/generic-transformation.cc | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/tests/generic-transformation.cc b/tests/generic-transformation.cc
index f5df2a5..5ca3d74 100644
--- tests/generic-transformation.cc
+++ tests/generic-transformation.cc
@@ -157,6 +157,9 @@ BOOST_AUTO_TEST_CASE (multithread) {
   functions.push_back(RelativeOrientation::create    ("RelativeOrientation"   , device, ee1, ee2, tf1)     );
   functions.push_back(RelativePosition::create       ("RelativePosition"      , device, ee1, ee2, tf1, tf2));
   functions.push_back(RelativeTransformation::create ("RelativeTransformation", device, ee1, ee2, tf1, tf2));
+  functions.push_back(RelativeOrientation::create    ("RelativeOrientation"   , device, ee1, JointPtr_t(), tf1)     );
+  functions.push_back(RelativePosition::create       ("RelativePosition"      , device, ee1, JointPtr_t(), tf1, tf2));
+  functions.push_back(RelativeTransformation::create ("RelativeTransformation", device, ee1, JointPtr_t(), tf1, tf2));
 
   const int N = 10;
   Configuration_t q = *cs.shoot();
